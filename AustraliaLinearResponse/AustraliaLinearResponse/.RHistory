mvrnnorm(10,c(0,3))
library("MASS", lib.loc="C:/Program Files/Microsoft/R Client/R_SERVER/library")
unloadNamespace("MASS")
library("MASS", lib.loc="C:/Program Files/Microsoft/R Client/R_SERVER/library")
mvrnnorm(10,c(0,3))
unloadNamespace("MASS")
run('import')
run('importData.R')
source('importData.R')
tmpColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         )     )
tmpColsOfInterest
tmpColsOfInterest = sort(c(match("SurvTimeDays", names(dataFullCols))))
tmpCols
tmpColsOfInterest
tmpColsOfInterest = sort(c(match("RecistN", names(dataFullCols))))
tmpColsOfInterest
tmpColsOfInterest = sort(c(match("BaseTimeMonths", names(dataFullCols))))
tmpColsOfInterest
tmpColsOfInterest = sort(c(match("VolDiseaseLimitN", names(dataFullCols))))
tmpColsOfInterest
tmpColsOfInterest = sort(c(match("RecistChange2", names(dataFullCols))))
tmpColsOfInterest
tmpColsOfInterest = sort(c(match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols)),         match("RecistChange2", names(dataFullCols)),         match("RecistChangeN", names(dataFullCols)))    )
tmp
tmpColsOfInterest
dataLinR
dataLinRECIST
dataLinRECIST['10127']
dataLinRECIST['10127']
dataLinRECIST[1]
rm(classRECIST, envir = as.environment(".GlobalEnv"))
source('loadData.R')
source('loadData.R')
source('loadData.R')
source('importData.R')
x1 = rnorm(5,0,1)
x1
x1 = rnorm(50,0,1)
require(ggplot2)
ggplot(data.frame(x1))
ggplot(data.frame(x1), aes(x1), geom_histogram(aes(y = ..density..)))
ggplot(data.frame(x1),aes(x1))
x1
ggplot(data.frame(x1),aes(x1))+geom_histogram()
set.seed(0)
x1 = rnorm(500,0,1)
ggplot(data.frame(x1),aes(x1))+geom_histogram()
x1 = rnorm(5000,0,1)
set.seed(0)
x1 = rnorm(5000,0,1)
ggplot(data.frame(x1),aes(x1))+geom_histogram()
set.seed(0)
x1 = rnorm(50000,0,1)
ggplot(data.frame(x1),aes(x1))+geom_histogram()
x1 = rnorm(50,10,1)
ggplot(data.frame(x1),aes(x1))+geom_histogram()
set.seed(0)
x1 = rnorm(50,10,1)
ggplot(data.frame(x1),aes(x1))+geom_histogram()
x1 = rnorm(500,10,1)
set.seed(0)
x1 = rnorm(500,10,1)
ggplot(data.frame(x1),aes(x1))+geom_histogram()
x1 = rnorm(500,10,1.5)
set.seed(0)
x1 = rnorm(500,10,1.5)
ggplot(data.frame(x1),aes(x1))+geom_histogram()
x1 = rnorm(500,10,2)
set.seed(0)
x1 = rnorm(500,10,2)
ggplot(data.frame(x1),aes(x1))+geom_histogram()
dataLinRECIST[1]
dataLinRECIST$EntryTimeDays
dataLinRECIST[]$EntryTimeDays
dataLinRECIST[:1]$EntryTimeDays
dataLinRECIST[,]$EntryTimeDays
dataLinRec
dataLinRECIST[]
classRECIST
x1 = rnorm(500,0,0.2)
ggplot(data.frame(x1),aes(x1))+geom_histogram()
tmpColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols)),         match("RecistChange2", names(dataFullCols)),         match("RecistChangeN", names(dataFullCols))         )     )
tmpStarterColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols))         )     )
dataLinRECIST[1]
dataLinRECIST[2]
dataLinRECIST[1]
dataLinRECIST[3]
dataLinRECIST[3]$meas
dataLinRECIST$meas[3]
dataLinRECIST['10003']
dataLinRECIST['10003']$meas
dataLinRECIST['10003'$meas]
dataLinRECIST['10003'][1]
dataLinRECIST['10003'][2]
dataLinRECIST['10003']['meas']
dataLinRECIST['10003']
dataLinRECIST['10003']$'10003'$Status
dataLinRECIST['10003']$'10003'$meas
as.char(1)
toString(2)
toString(3)
toString(4)
dataLinRECIST['10003']$'10003'$scanClass
dataLinRECIST['10001']$'10001'$scanClass
dataLinRECIST['10001']$'10001'$scanDates
288/9.47
9.47*30
9.47*30.5
477/15.7
tmpLinRECIST = dataLinRECIST['10001']
tmpLinRECIST
tmpLinRECIST[2] = dataLinRECIST['10002']
tmpLinRECIST
rm(tmpLinRECIST, envir = as.environment(".GlobalEnv"))
tmpLinRECIST[toString(1)] = dataLinRECIST[1]
tmpLinRECIST[toString(1)]$meas = 10
tmpLinRECIST['1'] = dataLinRECIST['10001']
tmpLinRECIST = dataLinRECIST['10001']
tmpList = list(meas=c(10,12),baseline=c(10,10),nadir=c(10,10))
tmpList
dataLinRECIST['10001']
tmpLinRECIST = list('1' = tmpList)
tmpLinRECIST['1']
x
x1 = rnorm(500,0,0.2)
x1 = rnorm(1,0,0.2)
x1
x1 = rnorm(1,1,0.2)
x1
x1 = factor(c("2","3"))
x1
x1 = factor(c("2","3"),c("2","3","4","6"))
x1
x1 = date()
x1
x1 = date("1999-01-01")
tmpLinRECIST = list('1' = tmpList)
tmpLinRECIST['2'] = tmpList
tmpLinRECIST = list(tmpLinRECIST, '2' = tmpList)
tmpLinRECIST
tmpLinRECIST = list('1' = tmpList)
mylist[[length(mylist) + 1]] <- tmpList
tmpLinRECIST[[length(mylist) + 1]] <- tmpList
tmpLinRECIST[[length(tmpLinRECIST) + 1]] <- tmpList
tmpLinRECIST
tmpLinRECIST = list()
tmpLinRECIST['1'] = tmpList
tmpLinRECIST[['1']] = tmpList
tmpLinRECIST[['2']] = tmpList
tmpLinRECIST
library(Hmisc) ### Simulate patient survival time and Recist change ### # Simulated patient cohort statistics nSimulatedPatients = 100 meanSimSurvivalTime = 400 # days meanSimMeasurementChange = 1 # fraction stdSimSurvivalTime = 50 stdSimMeasurementChange = 0.2 # Set the random number generator seed for reproducibility set.seed(0) # We simulate patient data that should have no correlation between survival and change in RECIST  # by drawing from two normal distributions, one for determining the survival of any given patient # and another for determining the measurement change. All patients will have only two measurements, # one at baseline and one follow-up, to keep things simple. The measurement at follow up is always  # 1 cm. #dataLinRECIST has following attributes for each patient: # meas: thickness measurements in numeric array # baseline: baseline measurement in numeric array of same length as meas # nadir: what measurement at any time point is the nadir, numeric array of same length as meas # scanClass: factor with 4 levels "2", "3", "4", "6" (EG: not sure what this means) # scanDates: Date array of format "yyyy-mm-dd", same length as meas # changeBaseline: relative change since baseline, numeric array of length 1 less than meas # changeNadir: relative change from nadir, numeric array of length 1 less than meas. If current measurement #   is nadir, this is 0. # changeMin: minimum change from baseline, single number # SurvTimeDays: days of survival since diagnosis, single number # SurvTimeMonths: months of survival since diagnosis (seems to be ~= SurvTimeDays / 30.4), single number # EntryTimeDays: days of entry on clinical trial? (EG: Not sure) Single number # EntryTimeMonths: months of entry on clinical trial? Single number # Initialize the list containing the simulated RECIST measurements simLinRECIST = list() for (iPat in 1:nSimulatedPatients) {     if (iPat == 1) {         # Create the first row in tmpLinRECIST, which will contain the data for the simulated patients         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = tmpMeasFollowUp             tmpChangeNadir = 0         } else {             tmpNadir = 1             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = c(tmpNadir, tmpNadir),             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[['1']] = tmpList     } else {         tmpPatIndex = toString(iPat)         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = tmpMeasFollowUp             tmpChangeNadir = 0         } else {             tmpNadir = 1             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = c(tmpNadir, tmpNadir),             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[[tmpPatIndex]] = tmpList     } }
### Simulate patient survival time and Recist change ### # Simulated patient cohort statistics nSimulatedPatients = 100 meanSimSurvivalTime = 400 # days meanSimMeasurementChange = 1 # fraction stdSimSurvivalTime = 50 stdSimMeasurementChange = 0.2 # Set the random number generator seed for reproducibility set.seed(0) # We simulate patient data that should have no correlation between survival and change in RECIST  # by drawing from two normal distributions, one for determining the survival of any given patient # and another for determining the measurement change. All patients will have only two measurements, # one at baseline and one follow-up, to keep things simple. The measurement at follow up is always  # 1 cm. #dataLinRECIST has following attributes for each patient: # meas: thickness measurements in numeric array # baseline: baseline measurement in numeric array of same length as meas # nadir: what measurement at any time point is the nadir, numeric array of same length as meas # scanClass: factor with 4 levels "2", "3", "4", "6" (EG: not sure what this means) # scanDates: Date array of format "yyyy-mm-dd", same length as meas # changeBaseline: relative change since baseline, numeric array of length 1 less than meas # changeNadir: relative change from nadir, numeric array of length 1 less than meas. If current measurement #   is nadir, this is 0. # changeMin: minimum change from baseline, single number # SurvTimeDays: days of survival since diagnosis, single number # SurvTimeMonths: months of survival since diagnosis (seems to be ~= SurvTimeDays / 30.4), single number # EntryTimeDays: days of entry on clinical trial? (EG: Not sure) Single number # EntryTimeMonths: months of entry on clinical trial? Single number # Initialize the list containing the simulated RECIST measurements simLinRECIST = list() for (iPat in 1:nSimulatedPatients) {     if (iPat == 1) {         # Create the first row in tmpLinRECIST, which will contain the data for the simulated patients         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = c(1, tmpMeasFollowUp)             tmpChangeNadir = 0         } else {             tmpNadir = c(1, 1)             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = c(tmpNadir, tmpNadir),             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[['1']] = tmpList     } else {         tmpPatIndex = toString(iPat)         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = tmpMeasFollowUp             tmpChangeNadir = 0         } else {             tmpNadir = 1             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = c(tmpNadir, tmpNadir),             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[[tmpPatIndex]] = tmpList     } }
### Simulate patient survival time and Recist change ### # Simulated patient cohort statistics nSimulatedPatients = 100 meanSimSurvivalTime = 400 # days meanSimMeasurementChange = 1 # fraction stdSimSurvivalTime = 50 stdSimMeasurementChange = 0.2 # Set the random number generator seed for reproducibility set.seed(0) # We simulate patient data that should have no correlation between survival and change in RECIST  # by drawing from two normal distributions, one for determining the survival of any given patient # and another for determining the measurement change. All patients will have only two measurements, # one at baseline and one follow-up, to keep things simple. The measurement at follow up is always  # 1 cm. #dataLinRECIST has following attributes for each patient: # meas: thickness measurements in numeric array # baseline: baseline measurement in numeric array of same length as meas # nadir: what measurement at any time point is the nadir, numeric array of same length as meas # scanClass: factor with 4 levels "2", "3", "4", "6" (EG: not sure what this means) # scanDates: Date array of format "yyyy-mm-dd", same length as meas # changeBaseline: relative change since baseline, numeric array of length 1 less than meas # changeNadir: relative change from nadir, numeric array of length 1 less than meas. If current measurement #   is nadir, this is 0. # changeMin: minimum change from baseline, single number # SurvTimeDays: days of survival since diagnosis, single number # SurvTimeMonths: months of survival since diagnosis (seems to be ~= SurvTimeDays / 30.4), single number # EntryTimeDays: days of entry on clinical trial? (EG: Not sure) Single number # EntryTimeMonths: months of entry on clinical trial? Single number # Initialize the list containing the simulated RECIST measurements simLinRECIST = list() for (iPat in 1:nSimulatedPatients) {     if (iPat == 1) {         # Create the first row in tmpLinRECIST, which will contain the data for the simulated patients         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = c(1, tmpMeasFollowUp)             tmpChangeNadir = 0         } else {             tmpNadir = c(1, 1)             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = tmpNadir,             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[['1']] = tmpList     } else {         tmpPatIndex = toString(iPat)         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = tmpMeasFollowUp             tmpChangeNadir = 0         } else {             tmpNadir = 1             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = c(tmpNadir, tmpNadir),             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[[tmpPatIndex]] = tmpList     } }
install.packages("Hmisc", lib="C:/Users/egudmundsson/Documents/R/win-library/3.3")
source('importData.R')
install.packages("Hmisc", lib="C:/Program Files/Microsoft/R Client/R_SERVER/library")
library(Hmisc) ### Simulate patient survival time and Recist change ### # Simulated patient cohort statistics nSimulatedPatients = 100 meanSimSurvivalTime = 400 # days meanSimMeasurementChange = 1 # fraction stdSimSurvivalTime = 50 stdSimMeasurementChange = 0.2 # Set the random number generator seed for reproducibility set.seed(0) # We simulate patient data that should have no correlation between survival and change in RECIST  # by drawing from two normal distributions, one for determining the survival of any given patient # and another for determining the measurement change. All patients will have only two measurements, # one at baseline and one follow-up, to keep things simple. The measurement at follow up is always  # 1 cm. #dataLinRECIST has following attributes for each patient: # meas: thickness measurements in numeric array # baseline: baseline measurement in numeric array of same length as meas # nadir: what measurement at any time point is the nadir, numeric array of same length as meas # scanClass: factor with 4 levels "2", "3", "4", "6" (EG: not sure what this means) # scanDates: Date array of format "yyyy-mm-dd", same length as meas # changeBaseline: relative change since baseline, numeric array of length 1 less than meas # changeNadir: relative change from nadir, numeric array of length 1 less than meas. If current measurement #   is nadir, this is 0. # changeMin: minimum change from baseline, single number # SurvTimeDays: days of survival since diagnosis, single number # SurvTimeMonths: months of survival since diagnosis (seems to be ~= SurvTimeDays / 30.4), single number # EntryTimeDays: days of entry on clinical trial? (EG: Not sure) Single number # EntryTimeMonths: months of entry on clinical trial? Single number # Initialize the list containing the simulated RECIST measurements simLinRECIST = list() for (iPat in 1:nSimulatedPatients) {     if (iPat == 1) {         # Create the first row in tmpLinRECIST, which will contain the data for the simulated patients         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = c(1, tmpMeasFollowUp)             tmpChangeNadir = 0         } else {             tmpNadir = c(1, 1)             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = tmpNadir,             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[['1']] = tmpList     } else {         tmpPatIndex = toString(iPat)         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = tmpMeasFollowUp             tmpChangeNadir = 0         } else {             tmpNadir = 1             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = c(tmpNadir, tmpNadir),             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[[tmpPatIndex]] = tmpList     } }
tmpColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols)),         match("RecistChange2", names(dataFullCols)),         match("RecistChangeN", names(dataFullCols))         )     )
tmpDataContinuousRow = dataFullCols[1, tmpColsOfInterest] tmpDataContinuous$RecistBest = NA
tmpDataContinuousRow = dataFullCols[1, tmpColsOfInterest] tmpDataContinuousRow$RecistBest = NA
simDataContinuous = tmpDataContinuousRow
simDataContinuous[2] = tmpDataContinuousRow
simDataContinuous[2,] = tmpDataContinuousRow
### Simulate patient survival time and Recist change ### # Simulated patient cohort statistics nSimulatedPatients = 100 meanSimSurvivalTime = 400 # days meanSimMeasurementChange = 1 # fraction stdSimSurvivalTime = 50 stdSimMeasurementChange = 0.2 # Set the random number generator seed for reproducibility set.seed(0) # We simulate patient data that should have no correlation between survival and change in RECIST  # by drawing from two normal distributions, one for determining the survival of any given patient # and another for determining the measurement change. All patients will have only two measurements, # one at baseline and one follow-up, to keep things simple. The measurement at follow up is always  # 1 cm. #dataLinRECIST has following attributes for each patient: # meas: thickness measurements in numeric array # baseline: baseline measurement in numeric array of same length as meas # nadir: what measurement at any time point is the nadir, numeric array of same length as meas # scanClass: factor with 4 levels "2", "3", "4", "6" (EG: not sure what this means) # scanDates: Date array of format "yyyy-mm-dd", same length as meas # changeBaseline: relative change since baseline, numeric array of length 1 less than meas # changeNadir: relative change from nadir, numeric array of length 1 less than meas. If current measurement #   is nadir, this is 0. # changeMin: minimum change from baseline, single number # SurvTimeDays: days of survival since diagnosis, single number # SurvTimeMonths: months of survival since diagnosis (seems to be ~= SurvTimeDays / 30.4), single number # EntryTimeDays: days of entry on clinical trial? (EG: Not sure) Single number # EntryTimeMonths: months of entry on clinical trial? Single number # Initialize the list containing the simulated RECIST measurements simLinRECIST = list() for (iPat in 1:nSimulatedPatients) {     if (iPat == 1) {         # Create the first row in tmpLinRECIST, which will contain the data for the simulated patients         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = c(1, tmpMeasFollowUp)             tmpChangeNadir = 0         } else {             tmpNadir = c(1, 1)             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = tmpNadir,             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[['1']] = tmpList     } else {         tmpPatIndex = toString(iPat)         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = tmpMeasFollowUp             tmpChangeNadir = 0         } else {             tmpNadir = 1             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = c(tmpNadir, tmpNadir),             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[[tmpPatIndex]] = tmpList     } } # set up the continuous metrics tmpColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols)),         match("RecistChange2", names(dataFullCols)),         match("RecistChangeN", names(dataFullCols))         )     ) tmpDataContinuousRow = dataFullCols[1, tmpColsOfInterest] tmpDataContinuousRow$RecistBest = NA simDataContinuous = tmpDataContinuousRow for (iPat in 1:nSimulatedPatients) {     simDataContinuous[iPat,] = tmpDataContinuousRow     simDataContinuous$RecistBest[iPat] = simLinRECIST[[as.character(iPat)]]$changeMin }
simLinRECIST[['2']]$meas
simLinRECIST[['2']]$meas[2]
simLinRECIST[['2']]
### Simulate patient survival time and Recist change ### # Simulated patient cohort statistics nSimulatedPatients = 100 meanSimSurvivalTime = 400 # days meanSimMeasurementChange = 1 # fraction stdSimSurvivalTime = 50 stdSimMeasurementChange = 0.2 # Set the random number generator seed for reproducibility set.seed(0) # We simulate patient data that should have no correlation between survival and change in RECIST  # by drawing from two normal distributions, one for determining the survival of any given patient # and another for determining the measurement change. All patients will have only two measurements, # one at baseline and one follow-up, to keep things simple. The measurement at follow up is always  # 1 cm. #dataLinRECIST has following attributes for each patient: # meas: thickness measurements in numeric array # baseline: baseline measurement in numeric array of same length as meas # nadir: what measurement at any time point is the nadir, numeric array of same length as meas # scanClass: factor with 4 levels "2", "3", "4", "6" (EG: not sure what this means) # scanDates: Date array of format "yyyy-mm-dd", same length as meas # changeBaseline: relative change since baseline, numeric array of length 1 less than meas # changeNadir: relative change from nadir, numeric array of length 1 less than meas. If current measurement #   is nadir, this is 0. # changeMin: minimum change from baseline, single number # SurvTimeDays: days of survival since diagnosis, single number # SurvTimeMonths: months of survival since diagnosis (seems to be ~= SurvTimeDays / 30.4), single number # EntryTimeDays: days of entry on clinical trial? (EG: Not sure) Single number # EntryTimeMonths: months of entry on clinical trial? Single number # Initialize the list containing the simulated RECIST measurements simLinRECIST = list() for (iPat in 1:nSimulatedPatients) {     if (iPat == 1) {         # Create the first row in tmpLinRECIST, which will contain the data for the simulated patients         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = c(1, tmpMeasFollowUp)             tmpChangeNadir = 0         } else {             tmpNadir = c(1, 1)             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = tmpNadir,             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[['1']] = tmpList     } else {         tmpPatIndex = toString(iPat)         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = tmpMeasFollowUp             tmpChangeNadir = 0         } else {             tmpNadir = 1             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = c(tmpNadir, tmpNadir),             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[[tmpPatIndex]] = tmpList     } } # set up the continuous metrics tmpColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols)),         match("RecistChange2", names(dataFullCols)),         match("RecistChangeN", names(dataFullCols))         )     ) # Generate the dataFullCols and dataContinuous data frames for the simulated data tmpDataFullRow = dataFullCols[1,] tmpDataContinuousRow = dataFullCols[1, tmpColsOfInterest] tmpDataContinuousRow$RecistBest = NA simDataFull = tmpDataFullRow simDataContinuous = tmpDataContinuousRow for (iPat in 1:nSimulatedPatients) {     # dataFull     simDataFull[iPat,] = tmpDataFullRow     simDataFull$URN[iPat] = iPat     simDataFull$Status[iPat] = 1     simDataFull$SurvTimeDays[iPat] = simLinRECIST[[as.character(iPat)]]$SurvTimeDays     simDataFull$EntryTimeDays[iPat] = simLinRECIST[[as.character(iPat)]]$EntryTimeDays     simDataFull$BaseTimeDays[iPat] = 30 # EG: Not sure what "BaseTimeDays" entails, putting in 30     simDataFull$RecistChange2[iPat] = simLinRECIST[[as.character(iPat)]]$changeBaseline     simDataFull$RecistChangeN[iPat] = simLinRECIST[[as.character(iPat)]]$changeBaseline     simDataFull$Recist1[iPat] = simLinRECIST[[as.character(iPat)]]$meas[1]     simDataFull$Recist2[iPat] = simLinRECIST[[as.character(iPat)]]$meas[2]     # dataContinuous     simDataContinuous[iPat,] = tmpDataContinuousRow     simDataContinuous$URN[iPat] = iPat     simDataContinuous$Status[iPat] = 1     simDataContinuous$SurvTimeDays[iPat] = simLinRECIST[[as.character(iPat)]]$SurvTimeDays     simDataContinuous$EntryTimeDays[iPat] = simLinRECIST[[as.character(iPat)]]$EntryTimeDays     simDataContinuous$BaseTimeDays[iPat] = 30 # EG: Not sure what "BaseTimeDays" entails, putting in 30     simDataContinuous$RecistChange2[iPat] = simLinRECIST[[as.character(iPat)]]$changeBaseline     simDataContinuous$RecistChangeN[iPat] = simLinRECIST[[as.character(iPat)]]$changeBaseline     simDataContinuous$RecistBest[iPat] = simLinRECIST[[as.character(iPat)]]$changeMin } # calculate some of the continuous metrics, since those are independent of the loops corr.Continuous = list() corr.Continuous$bestChange = rcorr.cens(-simDataContinuous$RecistBest,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) corr.Continuous$lastChange = rcorr.cens(-simDataContinuous$RecistChangeN,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) corr.Continuous$firstChange = rcorr.cens(-simDataContinuous$RecistChange2,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
install.packages("doSNOW", lib="C:/Program Files/Microsoft/R Client/R_SERVER/library")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
install.packages("doSNOW", lib="C:/Program Files/Microsoft/R Client/R_SERVER/library")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
library(ggplot2)
ggplot(data = simSurvivalTimes) + geom_histogram()
ggplot(data = simSurvivalTimes)
hist(simSurvivalTimes)
hist(simMeasChange)
plot(simMeasChange, simSurvivalTimes)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(simMeasChange, simSurvivalTimes)
# Initialize the list containing the simulated RECIST measurements simLinRECIST = list() for (iPat in 1:nSimulatedPatients) {     if (iPat == 1) {         # Create the first row in tmpLinRECIST, which will contain the data for the simulated patients         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         if (flagCorrelatedSurvival) {             # Keep the two calls to rnorm above, so that random number generation is still reproducible             # Here we make sure that tmpSurvDays and tmpMeasChange are correlated             tmpMeasChange = tmpSurvDays / meanSimSurvivalTime         }         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = c(1, tmpMeasFollowUp)             tmpChangeNadir = 0         } else {             tmpNadir = c(1, 1)             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = tmpNadir,             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[['1']] = tmpList     } else {         tmpPatIndex = toString(iPat)         tmpSurvDays = rnorm(1, meanSimSurvivalTime, stdSimSurvivalTime)         tmpMeasChange = rnorm(1, meanSimMeasurementChange, stdSimMeasurementChange)         tmpMeasFollowUp = 1 * tmpMeasChange         if (tmpMeasChange < 1) {             # in this case, the follow-up is the nadir measurement             tmpNadir = tmpMeasFollowUp             tmpChangeNadir = 0         } else {             tmpNadir = 1             tmpChangeNadir = tmpMeasChange - 1         }         tmpList = list(             meas = c(1, tmpMeasFollowUp),             baseline = c(1, 1),             nadir = c(tmpNadir, tmpNadir),             scanClass = factor(c("2", "3"), c("2", "3", "4", "6")), #using "2" and "3" for no good reason             scanDates = c("2017-01-01", "2017-02-02"),             changeBaseline = tmpMeasChange - 1,             changeNadir = tmpChangeNadir,             changeMin = tmpMeasChange - 1,             SurvTimeDays = tmpSurvDays,             SurvTimeMonths = tmpSurvDays / 30.4,             EntryTimeDays = tmpSurvDays,             EntryTimeMonths = tmpSurvDays / 30.4         )         simLinRECIST[[tmpPatIndex]] = tmpList     }     simSurvivalTimes[iPat] = tmpSurvDays     simMeasChange[iPat] = tmpMeasChange }
1/1.13
1/0.6
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(simMeasChange, simSurvivalTimes)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(simMeasChange, simSurvivalTimes)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(simMeasChange, simSurvivalTimes)
plot(simMeasChange, simSurvivalTimes)
plot(simMeasChange, simSurvivalTimes)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/importData.R")
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(simMeasChange,simSurvivalTimes)
maxC = 0.657
nPatients = 100
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
nPatients[2] = 50
maxC[2] = 0.633
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[3] = 0.725
nPatients[3] = 60
plot(simMeasChange,simSurvivalTimes)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[4] = 0.746
nPatients[4] = 70
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
nPatients[5] = 80
maxC[5] = 0.709
plot(nPatients,maxC)
plot(simMeasChange,simSurvivalTimes)
corr.Continuous
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[6] = 0.652
max(simMeasChange)
nPatients[6] = 90
plot(nPatients,maxC)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[7] = 0.715
nPatients[7] = 125
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[8] = 0.619
nPatients[8] = 150
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
nPatients[9] = 175
maxC[9] = 0.545
max(simMeasChange)
min(simMeasChange)
plot(simMeasChange,simSurvivalTimes)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[10] = 0.516
nPatients[10] = 200
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[11] = 0.52
nPatients[11] = 250
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[12] = 0.552
nPatients[12] = 300
max(simMeasChange)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[13] = 0.573
nPatients[13] = 350
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[14] = 0.541
nPatients[14] = 400
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
maxC[14] = 0.544
nPatients[15] = 500
plot(nPatients,maxC)
plot(nPatients,maxC)
nPatients[14] = 500
maxC[15] = 0.544
plot(nPatients,maxC)
methods(plot)
plot(nPatients,maxC,ylim=c(0.5,1))
plot(simMeasChange,simSurvivalTimes)
plot(simMeasChange,simSurvivalTimes,xlim=c(0.2,1.8))
plot(simMeasChange,simSurvivalTimes,xlim=c(0.3,1.7))
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(simMeasChange,simSurvivalTimes,xlim=c(0.3,1.7))
max(simMeasChange)
plot(simMeasChange,simSurvivalTimes,xlim=c(0.3,1.7))
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(simMeasChange,simSurvivalTimes,xlim=c(0.3,1.7))
min(simMeasChange)
max(simMeas)
max(simMeasChange)
source("I:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(simMeasChange,simSurvivalTimes,xlim=c(0.4,1.6))
plot(1-simMeasChange,simSurvivalTimes,xlim=c(0.4,1.6))
plot(1-simMeasChange,simSurvivalTimes,xlim=c(-0.4,+.6))
plot(1-simMeasChange,simSurvivalTimes,xlim=c(-0.6,+.6))
plot(simMeasChange -1,simSurvivalTimes,xlim=c(-0.6,+.6))
plot(simMeasChange -1,simSurvivalTimes,xlim=c(-0.6,+.6),xlabel='Change in dis. thickness')
plot(simMeasChange -1,simSurvivalTimes,xlim=c(-0.6,+.6),xlabel=c('Change in dis. thickness'))
source("F:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/importData.R")
source("F:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/importData.R")
source("F:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("F:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("F:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("F:/MesoResponse/AustraliaLinearResponse/AustraliaLinearResponse/analyzeCrossValidate_Simulation.R")
source("~/MATLAB/labcode/RCode/AustraliaLinearResponse/AustraliaLinearResponse/importData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R", echo = TRUE)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
# Analyze simulated patient data to see how the optimization compares to when we have real data. # # Before running this script, either: # # i) run the 'importData.R' script, followed by the 'generateSimulatedData.R' script. # ii) Load pre-generated simulated patient data, using the 'importData_Simulation.R' script, or #   manually loading it through the user interface. # # Once the simulated data is generated/loaded, this script runs the analysis on the simulated data. # # # Written by E Gudmundsson, June 2017 # vary the RECIST cutoffs and see what happens. tmpBaseDir = file.path('C:','Users','Justin','Documents','_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName) library(Hmisc) # calculate some of the continuous metrics, since those are independent of the loops corr.Continuous = list() corr.Continuous$bestChange = rcorr.cens(-simDataContinuous$RecistBest,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) corr.Continuous$lastChange = rcorr.cens(-simDataContinuous$RecistChangeN,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) corr.Continuous$firstChange = rcorr.cens(-simDataContinuous$RecistChange2,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) # do the variable cutpoint thing for the whole dataset corr.Cuts = seq(-1, 1, by = 0.05) source(file.path(tmpScriptDir, 'funcPerfMetrics.R')) tmpOutput = perf.metrics(corr.Cuts, simDataFullCols, simLinRECIST, classRECIST) corr.bestClass = tmpOutput$corr.bestClass corr.firstClass = tmpOutput$corr.firstClass corr.lastClass = tmpOutput$corr.lastClass logrank.bestClass = tmpOutput$logrank.bestClass logrank.firstClass = tmpOutput$logrank.firstClass logrank.lastClass = tmpOutput$logrank.lastClass save(list = c(     ls(pattern = 'corr.+'),     ls(pattern = 'logrank.+')),     file = file.path(tmpDataDir, 'SimulatedDataSetPerformance.rdata')) rm(list = ls(pattern = 'tmp.*')) rm(list = ls(pattern = 'i[[:upper:]]'))
install.packages("doSNOW", lib="C:/Users/Justin/Documents/R/win-library/3.3")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
# Analyze simulated patient data to see how the optimization compares to when we have real data. # # Before running this script, either: # i) run the 'importData.R' script, followed by the 'generateSimulatedData.R' script. # ii) Load pre-generated simulated patient data, using the 'importData_Simulation.R' script, or #   manually loading it through the user interface. # # Once the simulated data is generated/loaded, this script runs the analysis on the simulated data. # # # Written by E Gudmundsson, June 2017 #((Run 'generateSimulatedData.R', followed by 'importData_Simulation.R' # Flags indicating how to optimize flagMidPercentile = FALSE midPercentile = 80 flagCloseToClinical = FALSE flagCloseToClinicalNo0 = FALSE # vary the RECIST cutoffs and see what happens. tmpBaseDir = file.path('C:','Users','Justin','Documents','_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName) library(Hmisc) # calculate some of the continuous metrics, since those are independent of the loops corr.Continuous = list() corr.Continuous$bestChange = rcorr.cens(-simDataContinuous$RecistBest,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) corr.Continuous$lastChange = rcorr.cens(-simDataContinuous$RecistChangeN,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) corr.Continuous$firstChange = rcorr.cens(-simDataContinuous$RecistChange2,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) source(file.path(tmpScriptDir, 'createThresholds.R')) # do the variable cutpoint thing for the whole dataset source(file.path(tmpScriptDir, 'funcPerfMetrics.R')) tmpOutput = perf.metrics(corr.Cuts, simDataFullCols, simLinRECIST, classRECIST) corr.bestClass = tmpOutput$corr.bestClass corr.firstClass = tmpOutput$corr.firstClass corr.lastClass = tmpOutput$corr.lastClass logrank.bestClass = tmpOutput$logrank.bestClass logrank.firstClass = tmpOutput$logrank.firstClass logrank.lastClass = tmpOutput$logrank.lastClass save(list = c(     ls(pattern = 'corr.+'),     ls(pattern = 'logrank.+')),     file = file.path(tmpDataDir, 'SimulatedDataSetPerformance.rdata')) rm(list = ls(pattern = 'tmp.*')) rm(list = ls(pattern = 'i[[:upper:]]')) #plot(simSurvivalTimes, simMeasChange,     #xlim = c(min(simSurvivalTimes), max(simSurvivalTimes)),     #ylim = c(0, max(simMeasChange)),     #xlab = "Survival Time",     #ylab = "Change in Disease") #Divided the changes into 3 categories based on clinical thresholds sort(simMeasChange[(simMeasChange - 1) < (-0.3)]) sort(simMeasChange[(simMeasChange - 1) >(-0.3)&(simMeasChange-1)<0.2]) sort(simMeasChange[(simMeasChange - 1) > (0.2)]) #Correct Successes: #survived > 1 year and PR #survived < 1 yr and PD #find way to pair a patient's survival time and change simTimeChangePair = cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange))) a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 1) {         a[[i]] <- simTimeChangePair[i,]     } } a <- do.call(rbind, list(simTimeChangePair[i,]))
rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 1) {         a<-c(a,i)     } }
for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 1) {         a<-c(a,i)     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 1) {         a<-c(a,i)     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 1) {         a<-c(a,i)     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 1) {         a<-c(a,i)     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 1) {         a<-c(a,simTimeChangePair[,2][[i]])     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] > 1) {         a<-c(a,simTimeChangePair[,2][[i]])     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.7) {         a<-c(a,simTimeChangePair[,2][[i]])     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.7) {         a<-c(a,simTimeChangePair[1,])     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.7) {         a<-c(a,simTimeChangePair[i,])     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.8) {         a<-c(a,simTimeChangePair[i,])     } } rm(i)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.8) {         a<-c(a,simTimeChangePair[i,])     } } rm(i) a<-matrix(a,ncol=2)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.7) {         a<-c(a,simTimeChangePair[i,])     } } rm(i) a<-matrix(a,ncol=2)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.7) {         a<-c(a,simTimeChangePair[i,])     } } rm(i) a<-matrix(a,ncol=2)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.75) {         a<-c(a,simTimeChangePair[i,])     } } rm(i) a<-matrix(a,ncol=2)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.75) {         a<-c(a,simTimeChangePair[i,])     } } rm(i) a<-matrix(a,nrow=2)
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.75) {         a<-c(a,simTimeChangePair[i,])     } } rm(i) a<-t(matrix(a,nrow=2))
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] < 0.7) {         a<-c(a,simTimeChangePair[i,])     } } rm(i) a<-t(matrix(a,nrow=2))
a=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] <= 0.7) {         a<-c(a,simTimeChangePair[i,])     } } rm(i) a<-t(matrix(a,nrow=2))
rm(a)
simPatientsPR=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] <= (1-0.3)) {         simPatientsPR <- c(simPatientsPR, simTimeChangePair[i,])     } } rm(i) simPatientsPR <- t(matrix(simPatientsPR, nrow = 2))
#select patients that classified as PR simPatientsPR=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] <= (1-0.3)) {         simPatientsPR <- c(simPatientsPR, simTimeChangePair[i,])     } } rm(i) simPatientsPR <- t(matrix(simPatientsPR, nrow = 2))
#select patients that classified as PR simPatientsPR=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] <= (1-0.3)) {         simPatientsPR <- c(simPatientsPR, simTimeChangePair[i,])     }} rm(i) simPatientsPR <- t(matrix(simPatientsPR, nrow = 2)) #select patients that classified as PD simPatientsPD = list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] >= (1 +0.2)) {         simPatientsPD <- c(simPatientsPD, simTimeChangePair[i,])     }} rm(i) simPatientsPD <- t(matrix(simPatientsPD, nrow = 2))
#select patients that classified as PR simPatientsPR=list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] <= (1-0.3)) {         simPatientsPR <- c(simPatientsPR, simTimeChangePair[i,])     }} rm(i) simPatientsPR <- t(matrix(simPatientsPR, nrow = 2)) #select patients that classified as PD simPatientsPD = list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] >= (1 +0.2)) {         simPatientsPD <- c(simPatientsPD, simTimeChangePair[i,])     }} rm(i) simPatientsPD <- t(matrix(simPatientsPD, nrow = 2)) #select patients that classified as SD simPatientsSD = list() for (i in 1:nrow(simTimeChangePair)) {     if ((simTimeChangePair[, 2][[i]] > (1 - 0.3)) & (simTimeChangePair[, 2][[i]] < (1 + 0.2))) {         simPatientsSD <- c(simPatientsSD, simTimeChangePair[i,])     }} rm(i) simPatientsSD <- t(matrix(simPatientsSD, nrow = 2))
length(simPatientsPD)
nrow(simPatientsPD)
nrow(simPatientsPR)
nrow(simPatientsSD)
15+1+84
output$simPatientsPR.1
output$simPatientsPR>1
simPa
simPatientsPR>1
simPatientsPR[,1]
simPatientsPD[,1]
sum(simPatientsPD[,1]>1)
sum(simPatientsPD[, 1] > 365)
sum(simPatientsPD[, 1] < 365)
sum(simPatientsPR[, 1] > 365) sum(simPatientsPD[, 1] < 365)
nrow(simPatientsPR)
nrow(simPatientsPD)
sum(simPatientsPR[, 1] > 365)
sum(simTimeChangePair[,1]>365)
sum(simPatientsPR[, 1] > 365)
sum(simPatientsPR[, 1] > 365) / nrow(simPatientsPR)
nrow(simPatiensPD)
nrow(simPatientsPD)
sum(simPatientsPD[, 1] < 365)
sum(simPatientsPD[, 1] < 365) / nrow(simPatientsPD)
sum(simPatientsPR[, 1] > 365) / (sum(simPatientsPR[, 1] > 365) + sum(simPatientsPD[, 1] > 365))
sum(simPatientsPD[, 1] < 365) / (sum(simPatientsPD[, 1] < 365) + sum(simPatientsPR[, 1] < 365))
sum(simPatientsPD[, 1] < 365) / (sum(simPatientsPD[, 1] < 365) + sum(simPatientsPR[, 1] < 365))
sum(simPatientsPD[, 1] < 365)
sum(simPatientsPR[, 1] < 365)
sum(simPatientsPR[, 1] > 365) / nrow(simPatientsPR)
sum(simPatientsPD[, 1] < 365) / nrow(simPatientsPD)
sum(simPatientsPR[, 1] > 365) / (sum(simPatientsPR[, 1] > 365) + sum(simPatientsPD[, 1] > 365))
sum(simPatientsPD[, 1] < 365) / (sum(simPatientsPD[, 1] < 365) + sum(simPatientsPR[, 1] < 365))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
corr.bestClass$hi=5
rm(hi)
rm(corr.bestClass$hi)
rm('corr.bestClass$hi')
rm("corr.bestClass$hi")
rm(hi, envir = as.environment(".GlobalEnv"))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
hi
rm(hi, envir = as.environment(".GlobalEnv"))
corr.bestClass['hi']
rm(corr.bestClass['hi'])
rm(corr.bestClass['hi'])
perf.metrics=function(corr.Cuts,dataFullCols,dataLinRECIST,classRECIST) { library(Hmisc) library(doSNOW) cl <- makeCluster(2, type = "SOCK") registerDoSNOW(cl) tmpN=length(corr.Cuts) tmpMatrix=matrix(nrow=tmpN,ncol=tmpN,data=0) # perf. is the matrix of P_k for varying RECIST cutoff points.  If the PD,PR # point is invalid (i.e., PD<PR), then just set P_k = 0.  The up and lo.95 # matrices are the upper and lower 95% confidence intervals on the stat. # That multiplicative factor is 1.95996 corr.bestClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) # that first data frame is for doing the STANDARD recist algorithm. # let's also see how this performs using the last continuous change per patient, # and the first change per patient (from baseline to very first followup) corr.lastClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) corr.firstClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) # prepare the log-rank matrices too. logrank.bestClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.firstClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.lastClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) # get the patients in this collection tmpListPats=names(dataLinRECIST) # make the starter data for the rest of these runs tmpStarterColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols))         )     ) tmpStarterData=dataFullCols[, tmpStarterColsOfInterest] # calculate the classification tasks for the array of cutpoints. # this is the part that can be done in parallel. # the net output of this section of code is the corr.bestClass, # corr.firstClass, and corr.lastClass variables.  That's it. tmpOpts=list(chunkSize=ceil(tmpN/getDoParWorkers())) tmpParOutput=foreach(iRow=1:tmpN, .combine='rbind', .inorder=FALSE, .packages=c('survival','Hmisc'), .options.smp=tmpOpts) %:% 	foreach(iCol=1:tmpN, .combine='rbind', .inorder=FALSE, .packages=c('survival','Hmisc')) %dopar% { 		tmpCutPR = corr.Cuts[iRow]	# row tied to PR 		tmpCutPD = corr.Cuts[iCol]	# column tied to PD 		if (tmpCutPD>=0 && tmpCutPR<=0) { # otherwise it doesn't make sense. 		tmpPatClass = tmpStarterData 		tmpPatClass$bestClass=NA 		tmpPatClass$lastClass=NA 		tmpPatClass$firstClass=NA 		for (iPat in tmpListPats) { 			tmpPatRecord = dataLinRECIST[[as.character(iPat)]] 			tmpNumUpdates=length(tmpPatRecord$changeBaseline) 			tmpPatRecord$classRECIST=NA 			# Generate the RECIST classifications 			for (iUpdate in 1:tmpNumUpdates) { 				tmpPatRecord$classRECIST[iUpdate]=classRECIST( 					tmpPatRecord$changeBaseline[iUpdate], 					tmpPatRecord$changeNadir[iUpdate], 					c(tmpCutPR,tmpCutPD)) 			} 			# Determine the classifications that "stick" 			tmpPatRecord$classRECIST=factor(tmpPatRecord$classRECIST, 				levels=c('PD','SD','PR'),labels=c(1,2,3)) 			tmpRow=match(as.character(iPat),tmpPatClass$URN) 			tmpPatClass$bestClass[tmpRow]=max(as.numeric(tmpPatRecord$classRECIST)) 			tmpPatClass$lastClass[tmpRow]=tmpPatRecord$classRECIST[tmpNumUpdates] 			tmpPatClass$firstClass[tmpRow]=tmpPatRecord$classRECIST[1] 		} 		# calculate the model performance at this cutpoint 		tmpCorrObj1=rcorr.cens(tmpPatClass$bestClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		tmpCorrObj2=rcorr.cens(tmpPatClass$lastClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		tmpCorrObj3=rcorr.cens(tmpPatClass$firstClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		# calculate the log-rank tests at this cutpoint 		if (length(unique(tmpPatClass$bestClass))>1) { 			tmpLogRank1=survdiff(Surv(SurvTimeDays,Status)~bestClass,data=tmpPatClass) 			tmpLRdf1=length(tmpLogRank1$obs)-1 			tmpLRcs1=tmpLogRank1$chisq 			tmpLRp1=pchisq(tmpLRcs1,tmpLRdf1,lower.tail=FALSE) 		} 		else { 			tmpLRdf1=0; tmpLRcs1=0; tmpLRp1=1; 		} 		if (length(unique(tmpPatClass$lastClass))>1) { 			tmpLogRank2=survdiff(Surv(SurvTimeDays,Status)~lastClass,data=tmpPatClass) 			tmpLRdf2=length(tmpLogRank2$obs)-1 			tmpLRcs2=tmpLogRank2$chisq 			tmpLRp2=pchisq(tmpLRcs2,tmpLRdf2,lower.tail=FALSE) 		} 		else { 			tmpLRdf2=0; tmpLRcs2=0; tmpLRp2=1; 		} 		if (length(unique(tmpPatClass$firstClass))>1) { 			tmpLogRank3=survdiff(Surv(SurvTimeDays,Status)~firstClass,data=tmpPatClass) 			tmpLRdf3=length(tmpLogRank3$obs)-1 			tmpLRcs3=tmpLogRank3$chisq 			tmpLRp3=pchisq(tmpLRcs3,tmpLRdf3,lower.tail=FALSE) 		} 		else { 			tmpLRdf3=0; tmpLRcs3=0; tmpLRp3=1;         } 		data.frame(row=iRow,col=iCol, 			bcP=tmpCorrObj1['C Index'], 			bcU=tmpCorrObj1['C Index'] + 1.95996*tmpCorrObj1['S.D.']/2, 			bcL=tmpCorrObj1['C Index'] - 1.95996*tmpCorrObj1['S.D.']/2, 			lcP=tmpCorrObj2['C Index'], 			lcU=tmpCorrObj2['C Index'] + 1.95996*tmpCorrObj2['S.D.']/2, 			lcL=tmpCorrObj2['C Index'] - 1.95996*tmpCorrObj2['S.D.']/2, 			fcP=tmpCorrObj3['C Index'], 			fcU=tmpCorrObj3['C Index'] + 1.95996*tmpCorrObj3['S.D.']/2, 			fcL=tmpCorrObj3['C Index'] - 1.95996*tmpCorrObj3['S.D.']/2, 			lr.BCcs=tmpLRcs1, lr.BCdf=tmpLRdf1, lr.BCp=tmpLRp1, 			lr.LCcs=tmpLRcs2, lr.LCdf=tmpLRdf2, lr.LCp=tmpLRp2, 			lr.FCcs=tmpLRcs3, lr.FCdf=tmpLRdf3, lr.FCp=tmpLRp3) 		} 		else { 			data.frame(row=iRow,col=iCol, 			bcP=0,bcU=0,bcL=0,lcP=0,lcU=0,lcL=0,fcP=0,fcU=0,fcL=0, 			lr.BCcs=0,lr.BCdf=0,lr.BCp=1, 			lr.LCcs=0,lr.LCdf=0,lr.LCp=1, 			lr.FCcs=0,lr.FCdf=0,lr.FCp=1) 		} } stopCluster(cl) tmpParOutput=tmpParOutput[order(tmpParOutput$row,tmpParOutput$col),] corr.bestClass$perf=matrix(tmpParOutput$bcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.bestClass$up95=matrix(tmpParOutput$bcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.bestClass$lo95=matrix(tmpParOutput$bcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$perf=matrix(tmpParOutput$lcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$up95=matrix(tmpParOutput$lcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$lo95=matrix(tmpParOutput$lcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$perf=matrix(tmpParOutput$fcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$up95=matrix(tmpParOutput$fcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$lo95=matrix(tmpParOutput$fcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$chisq=matrix(tmpParOutput$lr.BCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$df=matrix(tmpParOutput$lr.BCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$p=matrix(tmpParOutput$lr.BCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$chisq=matrix(tmpParOutput$lr.LCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$df=matrix(tmpParOutput$lr.LCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$p=matrix(tmpParOutput$lr.LCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$chisq=matrix(tmpParOutput$lr.FCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$df=matrix(tmpParOutput$lr.FCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$p=matrix(tmpParOutput$lr.FCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) # find the maximal statistics corr.bestClass$max=max(corr.bestClass$perf,na.rm=TRUE) corr.bestClass$max.PR=corr.Cuts[arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[1]] corr.bestClass$max.PD=corr.Cuts[arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[2]] corr.bestClass$perf.stdev=with(corr.bestClass,(up95-perf)/1.95996) corr.bestClass$max.indPR=arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[1] corr.bestClass$max.indPD=arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[2] corr.lastClass$max=max(corr.lastClass$perf,na.rm=TRUE) corr.lastClass$max.PR=corr.Cuts[arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[1]] corr.lastClass$max.PD=corr.Cuts[arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[2]] corr.lastClass$perf.stdev=with(corr.lastClass,(up95-perf)/1.95996) corr.lastClass$max.indPR=arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[1] corr.lastClass$max.indPD=arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[2] corr.firstClass$max=max(corr.firstClass$perf,na.rm=TRUE) corr.firstClass$max.PR=corr.Cuts[arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[1]] corr.firstClass$max.PD=corr.Cuts[arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[2]] corr.firstClass$perf.stdev=with(corr.firstClass,(up95-perf)/1.95996) corr.firstClass$max.indPR=arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[1] corr.firstClass$max.indPD=arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[2] logrank.bestClass$min=min(logrank.bestClass$p,na.rm=TRUE) logrank.bestClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.bestClass$p),dim(logrank.bestClass$p))[1]] logrank.bestClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.bestClass$p),dim(logrank.bestClass$p))[2]] logrank.lastClass$min=min(logrank.lastClass$p,na.rm=TRUE) logrank.lastClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.lastClass$p),dim(logrank.lastClass$p))[1]] logrank.lastClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.lastClass$p),dim(logrank.lastClass$p))[2]] logrank.firstClass$min=min(logrank.firstClass$p,na.rm=TRUE) logrank.firstClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.firstClass$p),dim(logrank.firstClass$p))[1]] logrank.firstClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.firstClass$p),dim(logrank.firstClass$p))[2]] # calculate significance matrices for each result against the std model. tmpCurPR=match(-0.3,round(corr.Cuts,5)) tmpCurPD=match(0.2,round(corr.Cuts,5)) tmpData=corr.bestClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.bestClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) tmpData=corr.firstClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.firstClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) tmpData=corr.lastClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.lastClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) # find the minimum p-value corr.bestClass$minP=min(corr.bestClass$perf.p,na.rm=TRUE) corr.bestClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.bestClass$perf.p),dim(corr.bestClass$perf.p))[1]] corr.bestClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.bestClass$perf.p),dim(corr.bestClass$perf.p))[2]] corr.lastClass$minP=min(corr.lastClass$perf.p,na.rm=TRUE) corr.lastClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.lastClass$perf.p),dim(corr.lastClass$perf.p))[1]] corr.lastClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.lastClass$perf.p),dim(corr.lastClass$perf.p))[2]] corr.firstClass$minP=min(corr.firstClass$perf.p,na.rm=TRUE) corr.firstClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.firstClass$perf.p),dim(corr.firstClass$perf.p))[1]] corr.firstClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.firstClass$perf.p),dim(corr.firstClass$perf.p))[2]] return(list( 	corr.bestClass=corr.bestClass, 	corr.lastClass=corr.lastClass, 	corr.firstClass=corr.firstClass, 	logrank.bestClass=logrank.bestClass, 	logrank.lastClass=logrank.lastClass, 	logrank.firstClass=logrank.firstClass)) }
rm(hi, envir = as.environment(".GlobalEnv"))
corr.bestClass$hi=0
corr.bestClass$hi=()
corr.bestClass$hi=j
corr.bestClass$hi=j
corr.bestClass$hi
rm(corr.bestClass$hi)
rm(hi)
hi
corr.bestClass$hi
corr.bestClass$hii<-corr.bestClass$hi
rm(hii, envir = as.environment(".GlobalEnv"))
corr.bestClass=list()
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
tmpMatrix
tmpMatrix = matrix(nrow = tmpN, ncol = tmpN, data = 0)
tmpN = length(corr.Cuts) tmpMatrix = matrix(nrow = tmpN, ncol = tmpN, data = 0)
tmpN = length(corr.Cuts)
tmpN = length(corr.Cuts) tmpMatrix = matrix(nrow = tmpN, ncol = tmpN, data = 0)
tmpN=length(corr.Cuts) tmpMatrix=matrix(nrow=tmpN,ncol=tmpN,data=0)
tmpN
corr.Cuts
tmpMatrix
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
tmpN
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
tmpN
tmpCutPR
tmpCutPR1+1
1+1
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
corr.bestClass$ppv = tmpCutPD
corr.bestClass$ppv = 1
ppv
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
        a=1
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
a
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
rm(a)
		a=5
perf.metrics=function(corr.Cuts,dataFullCols,dataLinRECIST,classRECIST) { library(Hmisc) library(doSNOW) cl <- makeCluster(2, type = "SOCK") registerDoSNOW(cl) tmpN=length(corr.Cuts) tmpMatrix=matrix(nrow=tmpN,ncol=tmpN,data=0) # perf. is the matrix of P_k for varying RECIST cutoff points.  If the PD,PR # point is invalid (i.e., PD<PR), then just set P_k = 0.  The up and lo.95 # matrices are the upper and lower 95% confidence intervals on the stat. # That multiplicative factor is 1.95996 corr.bestClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) # that first data frame is for doing the STANDARD recist algorithm. # let's also see how this performs using the last continuous change per patient, # and the first change per patient (from baseline to very first followup) corr.lastClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) corr.firstClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) # prepare the log-rank matrices too. logrank.bestClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.firstClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.lastClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) # get the patients in this collection tmpListPats=names(dataLinRECIST) # make the starter data for the rest of these runs tmpStarterColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols))         )     ) tmpStarterData=dataFullCols[, tmpStarterColsOfInterest] # calculate the classification tasks for the array of cutpoints. # this is the part that can be done in parallel. # the net output of this section of code is the corr.bestClass, # corr.firstClass, and corr.lastClass variables.  That's it. tmpOpts=list(chunkSize=ceil(tmpN/getDoParWorkers())) tmpParOutput=foreach(iRow=1:tmpN, .combine='rbind', .inorder=FALSE, .packages=c('survival','Hmisc'), .options.smp=tmpOpts) %:% 	foreach(iCol=1:tmpN, .combine='rbind', .inorder=FALSE, .packages=c('survival','Hmisc')) %dopar% { 		tmpCutPR = corr.Cuts[iRow]	# row tied to PR 		tmpCutPD = corr.Cuts[iCol]	# column tied to PD 		if (tmpCutPD>=0 && tmpCutPR<=0) { # otherwise it doesn't make sense. 		a=6 		tmpPatClass = tmpStarterData 		tmpPatClass$bestClass=NA 		tmpPatClass$lastClass=NA 		tmpPatClass$firstClass=NA 		for (iPat in tmpListPats) { 			tmpPatRecord = dataLinRECIST[[as.character(iPat)]] 			tmpNumUpdates=length(tmpPatRecord$changeBaseline) 			tmpPatRecord$classRECIST=NA 			# Generate the RECIST classifications 			for (iUpdate in 1:tmpNumUpdates) { 				tmpPatRecord$classRECIST[iUpdate]=classRECIST( 					tmpPatRecord$changeBaseline[iUpdate], 					tmpPatRecord$changeNadir[iUpdate], 					c(tmpCutPR,tmpCutPD)) 			} 			# Determine the classifications that "stick" 			tmpPatRecord$classRECIST=factor(tmpPatRecord$classRECIST, 				levels=c('PD','SD','PR'),labels=c(1,2,3)) 			tmpRow=match(as.character(iPat),tmpPatClass$URN) 			tmpPatClass$bestClass[tmpRow]=max(as.numeric(tmpPatRecord$classRECIST)) 			tmpPatClass$lastClass[tmpRow]=tmpPatRecord$classRECIST[tmpNumUpdates] 			tmpPatClass$firstClass[tmpRow]=tmpPatRecord$classRECIST[1] 		} 		# calculate the model performance at this cutpoint 		tmpCorrObj1=rcorr.cens(tmpPatClass$bestClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		tmpCorrObj2=rcorr.cens(tmpPatClass$lastClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		tmpCorrObj3=rcorr.cens(tmpPatClass$firstClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		# calculate the log-rank tests at this cutpoint 		if (length(unique(tmpPatClass$bestClass))>1) { 			tmpLogRank1=survdiff(Surv(SurvTimeDays,Status)~bestClass,data=tmpPatClass) 			tmpLRdf1=length(tmpLogRank1$obs)-1 			tmpLRcs1=tmpLogRank1$chisq 			tmpLRp1=pchisq(tmpLRcs1,tmpLRdf1,lower.tail=FALSE) 		} 		else { 			tmpLRdf1=0; tmpLRcs1=0; tmpLRp1=1; 		} 		if (length(unique(tmpPatClass$lastClass))>1) { 			tmpLogRank2=survdiff(Surv(SurvTimeDays,Status)~lastClass,data=tmpPatClass) 			tmpLRdf2=length(tmpLogRank2$obs)-1 			tmpLRcs2=tmpLogRank2$chisq 			tmpLRp2=pchisq(tmpLRcs2,tmpLRdf2,lower.tail=FALSE) 		} 		else { 			tmpLRdf2=0; tmpLRcs2=0; tmpLRp2=1; 		} 		if (length(unique(tmpPatClass$firstClass))>1) { 			tmpLogRank3=survdiff(Surv(SurvTimeDays,Status)~firstClass,data=tmpPatClass) 			tmpLRdf3=length(tmpLogRank3$obs)-1 			tmpLRcs3=tmpLogRank3$chisq 			tmpLRp3=pchisq(tmpLRcs3,tmpLRdf3,lower.tail=FALSE) 		} 		else { 			tmpLRdf3=0; tmpLRcs3=0; tmpLRp3=1; 		} 		data.frame(row=iRow,col=iCol, 			bcP=tmpCorrObj1['C Index'], 			bcU=tmpCorrObj1['C Index'] + 1.95996*tmpCorrObj1['S.D.']/2, 			bcL=tmpCorrObj1['C Index'] - 1.95996*tmpCorrObj1['S.D.']/2, 			lcP=tmpCorrObj2['C Index'], 			lcU=tmpCorrObj2['C Index'] + 1.95996*tmpCorrObj2['S.D.']/2, 			lcL=tmpCorrObj2['C Index'] - 1.95996*tmpCorrObj2['S.D.']/2, 			fcP=tmpCorrObj3['C Index'], 			fcU=tmpCorrObj3['C Index'] + 1.95996*tmpCorrObj3['S.D.']/2, 			fcL=tmpCorrObj3['C Index'] - 1.95996*tmpCorrObj3['S.D.']/2, 			lr.BCcs=tmpLRcs1, lr.BCdf=tmpLRdf1, lr.BCp=tmpLRp1, 			lr.LCcs=tmpLRcs2, lr.LCdf=tmpLRdf2, lr.LCp=tmpLRp2, 			lr.FCcs=tmpLRcs3, lr.FCdf=tmpLRdf3, lr.FCp=tmpLRp3) 		} 		else { 			data.frame(row=iRow,col=iCol, 			bcP=0,bcU=0,bcL=0,lcP=0,lcU=0,lcL=0,fcP=0,fcU=0,fcL=0, 			lr.BCcs=0,lr.BCdf=0,lr.BCp=1, 			lr.LCcs=0,lr.LCdf=0,lr.LCp=1, 			lr.FCcs=0,lr.FCdf=0,lr.FCp=1)         } } stopCluster(cl) tmpParOutput=tmpParOutput[order(tmpParOutput$row,tmpParOutput$col),] corr.bestClass$perf=matrix(tmpParOutput$bcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.bestClass$up95=matrix(tmpParOutput$bcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.bestClass$lo95=matrix(tmpParOutput$bcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$perf=matrix(tmpParOutput$lcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$up95=matrix(tmpParOutput$lcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$lo95=matrix(tmpParOutput$lcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$perf=matrix(tmpParOutput$fcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$up95=matrix(tmpParOutput$fcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$lo95=matrix(tmpParOutput$fcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$chisq=matrix(tmpParOutput$lr.BCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$df=matrix(tmpParOutput$lr.BCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$p=matrix(tmpParOutput$lr.BCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$chisq=matrix(tmpParOutput$lr.LCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$df=matrix(tmpParOutput$lr.LCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$p=matrix(tmpParOutput$lr.LCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$chisq=matrix(tmpParOutput$lr.FCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$df=matrix(tmpParOutput$lr.FCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$p=matrix(tmpParOutput$lr.FCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) # find the maximal statistics corr.bestClass$max=max(corr.bestClass$perf,na.rm=TRUE) corr.bestClass$max.PR=corr.Cuts[arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[1]] corr.bestClass$max.PD=corr.Cuts[arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[2]] corr.bestClass$perf.stdev=with(corr.bestClass,(up95-perf)/1.95996) corr.bestClass$max.indPR=arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[1] corr.bestClass$max.indPD=arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[2] corr.lastClass$max=max(corr.lastClass$perf,na.rm=TRUE) corr.lastClass$max.PR=corr.Cuts[arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[1]] corr.lastClass$max.PD=corr.Cuts[arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[2]] corr.lastClass$perf.stdev=with(corr.lastClass,(up95-perf)/1.95996) corr.lastClass$max.indPR=arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[1] corr.lastClass$max.indPD=arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[2] corr.firstClass$max=max(corr.firstClass$perf,na.rm=TRUE) corr.firstClass$max.PR=corr.Cuts[arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[1]] corr.firstClass$max.PD=corr.Cuts[arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[2]] corr.firstClass$perf.stdev=with(corr.firstClass,(up95-perf)/1.95996) corr.firstClass$max.indPR=arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[1] corr.firstClass$max.indPD=arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[2] logrank.bestClass$min=min(logrank.bestClass$p,na.rm=TRUE) logrank.bestClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.bestClass$p),dim(logrank.bestClass$p))[1]] logrank.bestClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.bestClass$p),dim(logrank.bestClass$p))[2]] logrank.lastClass$min=min(logrank.lastClass$p,na.rm=TRUE) logrank.lastClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.lastClass$p),dim(logrank.lastClass$p))[1]] logrank.lastClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.lastClass$p),dim(logrank.lastClass$p))[2]] logrank.firstClass$min=min(logrank.firstClass$p,na.rm=TRUE) logrank.firstClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.firstClass$p),dim(logrank.firstClass$p))[1]] logrank.firstClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.firstClass$p),dim(logrank.firstClass$p))[2]] # calculate significance matrices for each result against the std model. tmpCurPR=match(-0.3,round(corr.Cuts,5)) tmpCurPD=match(0.2,round(corr.Cuts,5)) tmpData=corr.bestClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.bestClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) tmpData=corr.firstClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.firstClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) tmpData=corr.lastClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.lastClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) # find the minimum p-value corr.bestClass$minP=min(corr.bestClass$perf.p,na.rm=TRUE) corr.bestClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.bestClass$perf.p),dim(corr.bestClass$perf.p))[1]] corr.bestClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.bestClass$perf.p),dim(corr.bestClass$perf.p))[2]] corr.lastClass$minP=min(corr.lastClass$perf.p,na.rm=TRUE) corr.lastClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.lastClass$perf.p),dim(corr.lastClass$perf.p))[1]] corr.lastClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.lastClass$perf.p),dim(corr.lastClass$perf.p))[2]] corr.firstClass$minP=min(corr.firstClass$perf.p,na.rm=TRUE) corr.firstClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.firstClass$perf.p),dim(corr.firstClass$perf.p))[1]] corr.firstClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.firstClass$perf.p),dim(corr.firstClass$perf.p))[2]] return(list( 	corr.bestClass=corr.bestClass, 	corr.lastClass=corr.lastClass, 	corr.firstClass=corr.firstClass, 	logrank.bestClass=logrank.bestClass, 	logrank.lastClass=logrank.lastClass, 	logrank.firstClass=logrank.firstClass)) }
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
perf.metrics=function(corr.Cuts,dataFullCols,dataLinRECIST,classRECIST) { library(Hmisc) library(doSNOW) cl <- makeCluster(2, type = "SOCK") registerDoSNOW(cl) tmpN=length(corr.Cuts) tmpMatrix=matrix(nrow=tmpN,ncol=tmpN,data=0) # perf. is the matrix of P_k for varying RECIST cutoff points.  If the PD,PR # point is invalid (i.e., PD<PR), then just set P_k = 0.  The up and lo.95 # matrices are the upper and lower 95% confidence intervals on the stat. # That multiplicative factor is 1.95996 corr.bestClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) # that first data frame is for doing the STANDARD recist algorithm. # let's also see how this performs using the last continuous change per patient, # and the first change per patient (from baseline to very first followup) corr.lastClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) corr.firstClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) # prepare the log-rank matrices too. logrank.bestClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.firstClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.lastClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) # get the patients in this collection tmpListPats=names(dataLinRECIST) # make the starter data for the rest of these runs tmpStarterColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols))         )     ) tmpStarterData=dataFullCols[, tmpStarterColsOfInterest] # calculate the classification tasks for the array of cutpoints. # this is the part that can be done in parallel. # the net output of this section of code is the corr.bestClass, # corr.firstClass, and corr.lastClass variables.  That's it. tmpOpts=list(chunkSize=ceil(tmpN/getDoParWorkers())) tmpParOutput=foreach(iRow=1:tmpN, .combine='rbind', .inorder=FALSE, .packages=c('survival','Hmisc'), .options.smp=tmpOpts) %:% 	foreach(iCol=1:tmpN, .combine='rbind', .inorder=FALSE, .packages=c('survival','Hmisc')) %dopar% { 		tmpCutPR = corr.Cuts[iRow]	# row tied to PR 		tmpCutPD = corr.Cuts[iCol]	# column tied to PD 		a=6         if (tmpCutPD >= 0 && tmpCutPR <= 0) { # otherwise it doesn't make sense. 		tmpPatClass = tmpStarterData 		tmpPatClass$bestClass=NA 		tmpPatClass$lastClass=NA 		tmpPatClass$firstClass=NA 		for (iPat in tmpListPats) { 			tmpPatRecord = dataLinRECIST[[as.character(iPat)]] 			tmpNumUpdates=length(tmpPatRecord$changeBaseline) 			tmpPatRecord$classRECIST=NA 			# Generate the RECIST classifications 			for (iUpdate in 1:tmpNumUpdates) { 				tmpPatRecord$classRECIST[iUpdate]=classRECIST( 					tmpPatRecord$changeBaseline[iUpdate], 					tmpPatRecord$changeNadir[iUpdate], 					c(tmpCutPR,tmpCutPD)) 			} 			# Determine the classifications that "stick" 			tmpPatRecord$classRECIST=factor(tmpPatRecord$classRECIST, 				levels=c('PD','SD','PR'),labels=c(1,2,3)) 			tmpRow=match(as.character(iPat),tmpPatClass$URN) 			tmpPatClass$bestClass[tmpRow]=max(as.numeric(tmpPatRecord$classRECIST)) 			tmpPatClass$lastClass[tmpRow]=tmpPatRecord$classRECIST[tmpNumUpdates] 			tmpPatClass$firstClass[tmpRow]=tmpPatRecord$classRECIST[1] 		} 		# calculate the model performance at this cutpoint 		tmpCorrObj1=rcorr.cens(tmpPatClass$bestClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		tmpCorrObj2=rcorr.cens(tmpPatClass$lastClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		tmpCorrObj3=rcorr.cens(tmpPatClass$firstClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		# calculate the log-rank tests at this cutpoint 		if (length(unique(tmpPatClass$bestClass))>1) { 			tmpLogRank1=survdiff(Surv(SurvTimeDays,Status)~bestClass,data=tmpPatClass) 			tmpLRdf1=length(tmpLogRank1$obs)-1 			tmpLRcs1=tmpLogRank1$chisq 			tmpLRp1=pchisq(tmpLRcs1,tmpLRdf1,lower.tail=FALSE) 		} 		else { 			tmpLRdf1=0; tmpLRcs1=0; tmpLRp1=1; 		} 		if (length(unique(tmpPatClass$lastClass))>1) { 			tmpLogRank2=survdiff(Surv(SurvTimeDays,Status)~lastClass,data=tmpPatClass) 			tmpLRdf2=length(tmpLogRank2$obs)-1 			tmpLRcs2=tmpLogRank2$chisq 			tmpLRp2=pchisq(tmpLRcs2,tmpLRdf2,lower.tail=FALSE) 		} 		else { 			tmpLRdf2=0; tmpLRcs2=0; tmpLRp2=1; 		} 		if (length(unique(tmpPatClass$firstClass))>1) { 			tmpLogRank3=survdiff(Surv(SurvTimeDays,Status)~firstClass,data=tmpPatClass) 			tmpLRdf3=length(tmpLogRank3$obs)-1 			tmpLRcs3=tmpLogRank3$chisq 			tmpLRp3=pchisq(tmpLRcs3,tmpLRdf3,lower.tail=FALSE) 		} 		else { 			tmpLRdf3=0; tmpLRcs3=0; tmpLRp3=1; 		} 		data.frame(row=iRow,col=iCol, 			bcP=tmpCorrObj1['C Index'], 			bcU=tmpCorrObj1['C Index'] + 1.95996*tmpCorrObj1['S.D.']/2, 			bcL=tmpCorrObj1['C Index'] - 1.95996*tmpCorrObj1['S.D.']/2, 			lcP=tmpCorrObj2['C Index'], 			lcU=tmpCorrObj2['C Index'] + 1.95996*tmpCorrObj2['S.D.']/2, 			lcL=tmpCorrObj2['C Index'] - 1.95996*tmpCorrObj2['S.D.']/2, 			fcP=tmpCorrObj3['C Index'], 			fcU=tmpCorrObj3['C Index'] + 1.95996*tmpCorrObj3['S.D.']/2, 			fcL=tmpCorrObj3['C Index'] - 1.95996*tmpCorrObj3['S.D.']/2, 			lr.BCcs=tmpLRcs1, lr.BCdf=tmpLRdf1, lr.BCp=tmpLRp1, 			lr.LCcs=tmpLRcs2, lr.LCdf=tmpLRdf2, lr.LCp=tmpLRp2, 			lr.FCcs=tmpLRcs3, lr.FCdf=tmpLRdf3, lr.FCp=tmpLRp3) 		} 		else { 			data.frame(row=iRow,col=iCol, 			bcP=0,bcU=0,bcL=0,lcP=0,lcU=0,lcL=0,fcP=0,fcU=0,fcL=0, 			lr.BCcs=0,lr.BCdf=0,lr.BCp=1, 			lr.LCcs=0,lr.LCdf=0,lr.LCp=1, 			lr.FCcs=0,lr.FCdf=0,lr.FCp=1)         } } stopCluster(cl) tmpParOutput=tmpParOutput[order(tmpParOutput$row,tmpParOutput$col),] corr.bestClass$perf=matrix(tmpParOutput$bcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.bestClass$up95=matrix(tmpParOutput$bcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.bestClass$lo95=matrix(tmpParOutput$bcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$perf=matrix(tmpParOutput$lcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$up95=matrix(tmpParOutput$lcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$lo95=matrix(tmpParOutput$lcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$perf=matrix(tmpParOutput$fcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$up95=matrix(tmpParOutput$fcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$lo95=matrix(tmpParOutput$fcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$chisq=matrix(tmpParOutput$lr.BCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$df=matrix(tmpParOutput$lr.BCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$p=matrix(tmpParOutput$lr.BCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$chisq=matrix(tmpParOutput$lr.LCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$df=matrix(tmpParOutput$lr.LCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$p=matrix(tmpParOutput$lr.LCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$chisq=matrix(tmpParOutput$lr.FCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$df=matrix(tmpParOutput$lr.FCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$p=matrix(tmpParOutput$lr.FCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) # find the maximal statistics corr.bestClass$max=max(corr.bestClass$perf,na.rm=TRUE) corr.bestClass$max.PR=corr.Cuts[arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[1]] corr.bestClass$max.PD=corr.Cuts[arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[2]] corr.bestClass$perf.stdev=with(corr.bestClass,(up95-perf)/1.95996) corr.bestClass$max.indPR=arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[1] corr.bestClass$max.indPD=arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[2] corr.lastClass$max=max(corr.lastClass$perf,na.rm=TRUE) corr.lastClass$max.PR=corr.Cuts[arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[1]] corr.lastClass$max.PD=corr.Cuts[arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[2]] corr.lastClass$perf.stdev=with(corr.lastClass,(up95-perf)/1.95996) corr.lastClass$max.indPR=arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[1] corr.lastClass$max.indPD=arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[2] corr.firstClass$max=max(corr.firstClass$perf,na.rm=TRUE) corr.firstClass$max.PR=corr.Cuts[arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[1]] corr.firstClass$max.PD=corr.Cuts[arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[2]] corr.firstClass$perf.stdev=with(corr.firstClass,(up95-perf)/1.95996) corr.firstClass$max.indPR=arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[1] corr.firstClass$max.indPD=arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[2] logrank.bestClass$min=min(logrank.bestClass$p,na.rm=TRUE) logrank.bestClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.bestClass$p),dim(logrank.bestClass$p))[1]] logrank.bestClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.bestClass$p),dim(logrank.bestClass$p))[2]] logrank.lastClass$min=min(logrank.lastClass$p,na.rm=TRUE) logrank.lastClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.lastClass$p),dim(logrank.lastClass$p))[1]] logrank.lastClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.lastClass$p),dim(logrank.lastClass$p))[2]] logrank.firstClass$min=min(logrank.firstClass$p,na.rm=TRUE) logrank.firstClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.firstClass$p),dim(logrank.firstClass$p))[1]] logrank.firstClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.firstClass$p),dim(logrank.firstClass$p))[2]] # calculate significance matrices for each result against the std model. tmpCurPR=match(-0.3,round(corr.Cuts,5)) tmpCurPD=match(0.2,round(corr.Cuts,5)) tmpData=corr.bestClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.bestClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) tmpData=corr.firstClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.firstClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) tmpData=corr.lastClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.lastClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) # find the minimum p-value corr.bestClass$minP=min(corr.bestClass$perf.p,na.rm=TRUE) corr.bestClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.bestClass$perf.p),dim(corr.bestClass$perf.p))[1]] corr.bestClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.bestClass$perf.p),dim(corr.bestClass$perf.p))[2]] corr.lastClass$minP=min(corr.lastClass$perf.p,na.rm=TRUE) corr.lastClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.lastClass$perf.p),dim(corr.lastClass$perf.p))[1]] corr.lastClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.lastClass$perf.p),dim(corr.lastClass$perf.p))[2]] corr.firstClass$minP=min(corr.firstClass$perf.p,na.rm=TRUE) corr.firstClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.firstClass$perf.p),dim(corr.firstClass$perf.p))[1]] corr.firstClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.firstClass$perf.p),dim(corr.firstClass$perf.p))[2]] return(list( 	corr.bestClass=corr.bestClass, 	corr.lastClass=corr.lastClass, 	corr.firstClass=corr.firstClass, 	logrank.bestClass=logrank.bestClass, 	logrank.lastClass=logrank.lastClass, 	logrank.firstClass=logrank.firstClass)) }
rm(a)
?stopCluster
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
a
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
a
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
a
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
corr.cuts
corr.Cuts
expand.grid(corr.Cuts,corr.Cuts)
length(corr.Cuts)
41*41
matrix(expand.grid(corr.Cuts,corr.Cuts),nrow = length(corr.Cuts))
matrix(list(expand.grid(corr.Cuts,corr.Cuts)),nrow = length(corr.Cuts))
matrix(unlist(expand.grid(corr.Cuts,corr.Cuts)),nrow = length(corr.Cuts))
a=matrix(unlist(expand.grid(corr.Cuts,corr.Cuts)),nrow = length(corr.Cuts))
a = unlist(expand.grid(corr.Cuts, corr.Cuts))
a = expand.grid(corr.Cuts, corr.Cuts)
outer(1:5,1:12,"*")
outer(1:5, 1:12, ",")
outer(1:5, 1:12, "c")
?outer
outer(1:5, 1:12, "+")
expand.grid(1:5,1:12)
expand.grid(1:3, 1:3)
expand.grid(1:3, 1:3)
list(expand.grid(1:3, 1:3))
list(expand.grid(1:3, 1:3))[[1]]
list(expand.grid(1:3, 1:3))[[1]][[1]]
data.frame(list(expand.grid(1:3, 1:3)))
data.frame(list(expand.grid(1:3, 1:3)))[[1]]
t(data.frame(list(expand.grid(1:3, 1:3))))
t(data.frame(list(expand.grid(1:3, 1:3))))[[1]]
data.frame(t(data.frame(list(expand.grid(1:3, 1:3)))))
data.frame(t(data.frame(list(expand.grid(1:3, 1:3)))))[[1]]
a = matrix(unlist(expand.grid(corr.Cuts, corr.Cuts)), nrow = length(corr.Cuts))
a = unlist(expand.grid(corr.Cuts, corr.Cuts))
a =expand.grid(corr.Cuts, corr.Cuts)
source(file.path(tmpScriptDir, 'npvPpvSpecSens.R'))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source(file.path(tmpScriptDir, 'npvPpvSpecSens.R'))
tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)
tmpBaseDir = file.path('C:','Users','Justin','Documents','_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)
tmpBaseDir = file.path('C:','Users','Justin','Documents','_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)
source(file.path(tmpScriptDir, 'npvPpvSpecSens.R'))
rm(a)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
perf.metrics=function(corr.Cuts,dataFullCols,dataLinRECIST,classRECIST) { library(Hmisc) library(doSNOW) cl <- makeCluster(2, type = "SOCK") registerDoSNOW(cl) tmpN=length(corr.Cuts) tmpMatrix=matrix(nrow=tmpN,ncol=tmpN,data=0) # perf. is the matrix of P_k for varying RECIST cutoff points.  If the PD,PR # point is invalid (i.e., PD<PR), then just set P_k = 0.  The up and lo.95 # matrices are the upper and lower 95% confidence intervals on the stat. # That multiplicative factor is 1.95996 corr.bestClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) # that first data frame is for doing the STANDARD recist algorithm. # let's also see how this performs using the last continuous change per patient, # and the first change per patient (from baseline to very first followup) corr.lastClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) corr.firstClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) # prepare the log-rank matrices too. logrank.bestClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.firstClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.lastClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) # get the patients in this collection tmpListPats=names(dataLinRECIST) # make the starter data for the rest of these runs tmpStarterColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols))         )     ) tmpStarterData=dataFullCols[, tmpStarterColsOfInterest] # calculate the classification tasks for the array of cutpoints. # this is the part that can be done in parallel. # the net output of this section of code is the corr.bestClass, # corr.firstClass, and corr.lastClass variables.  That's it.     tmpOpts = list(chunkSize = ceil(tmpN / getDoParWorkers())) tmpParOutput=foreach(iRow=1:tmpN, .combine='rbind', .inorder=FALSE, .packages=c('survival','Hmisc'), .options.smp=tmpOpts) %:% 	foreach(iCol=1:tmpN, .combine='rbind', .inorder=FALSE, .packages=c('survival','Hmisc')) %dopar% { 		tmpCutPR = corr.Cuts[iRow]	# row tied to PR 		tmpCutPD = corr.Cuts[iCol]	# column tied to PD         if (tmpCutPD >= 0 && tmpCutPR <= 0) { # otherwise it doesn't make sense. 		tmpPatClass = tmpStarterData 		tmpPatClass$bestClass=NA 		tmpPatClass$lastClass=NA 		tmpPatClass$firstClass=NA 		for (iPat in tmpListPats) { 			tmpPatRecord = dataLinRECIST[[as.character(iPat)]] 			tmpNumUpdates=length(tmpPatRecord$changeBaseline) 			tmpPatRecord$classRECIST=NA 			# Generate the RECIST classifications 			for (iUpdate in 1:tmpNumUpdates) { 				tmpPatRecord$classRECIST[iUpdate]=classRECIST( 					tmpPatRecord$changeBaseline[iUpdate], 					tmpPatRecord$changeNadir[iUpdate], 					c(tmpCutPR,tmpCutPD)) 			} 			# Determine the classifications that "stick" 			tmpPatRecord$classRECIST=factor(tmpPatRecord$classRECIST, 				levels=c('PD','SD','PR'),labels=c(1,2,3)) 			tmpRow=match(as.character(iPat),tmpPatClass$URN) 			tmpPatClass$bestClass[tmpRow]=max(as.numeric(tmpPatRecord$classRECIST)) 			tmpPatClass$lastClass[tmpRow]=tmpPatRecord$classRECIST[tmpNumUpdates] 			tmpPatClass$firstClass[tmpRow]=tmpPatRecord$classRECIST[1] 		} 		# calculate the model performance at this cutpoint 		tmpCorrObj1=rcorr.cens(tmpPatClass$bestClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		tmpCorrObj2=rcorr.cens(tmpPatClass$lastClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		tmpCorrObj3=rcorr.cens(tmpPatClass$firstClass, 			Surv(tmpPatClass$SurvTimeDays,tmpPatClass$Status),outx=TRUE) 		# calculate the log-rank tests at this cutpoint 		if (length(unique(tmpPatClass$bestClass))>1) { 			tmpLogRank1=survdiff(Surv(SurvTimeDays,Status)~bestClass,data=tmpPatClass) 			tmpLRdf1=length(tmpLogRank1$obs)-1 			tmpLRcs1=tmpLogRank1$chisq 			tmpLRp1=pchisq(tmpLRcs1,tmpLRdf1,lower.tail=FALSE) 		} 		else { 			tmpLRdf1=0; tmpLRcs1=0; tmpLRp1=1; 		} 		if (length(unique(tmpPatClass$lastClass))>1) { 			tmpLogRank2=survdiff(Surv(SurvTimeDays,Status)~lastClass,data=tmpPatClass) 			tmpLRdf2=length(tmpLogRank2$obs)-1 			tmpLRcs2=tmpLogRank2$chisq 			tmpLRp2=pchisq(tmpLRcs2,tmpLRdf2,lower.tail=FALSE) 		} 		else { 			tmpLRdf2=0; tmpLRcs2=0; tmpLRp2=1; 		} 		if (length(unique(tmpPatClass$firstClass))>1) { 			tmpLogRank3=survdiff(Surv(SurvTimeDays,Status)~firstClass,data=tmpPatClass) 			tmpLRdf3=length(tmpLogRank3$obs)-1 			tmpLRcs3=tmpLogRank3$chisq 			tmpLRp3=pchisq(tmpLRcs3,tmpLRdf3,lower.tail=FALSE) 		} 		else { 			tmpLRdf3=0; tmpLRcs3=0; tmpLRp3=1; 		} #Calculating NPV, PPV, Sensitivity, Specificity simTimeChangePair = cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange))) simPatientsPR = list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] <= (1 - tmpCutPR)) {         simPatientsPR <- c(simPatientsPR, simTimeChangePair[i,])     } } rm(i) simPatientsPR <- t(matrix(simPatientsPR, nrow = 2)) simPatientsPD = list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] >= (1 + tmpCutPD)) {         simPatientsPD <- c(simPatientsPD, simTimeChangePair[i,])     } } rm(i) simPatientsPD <- t(matrix(simPatientsPD, nrow = 2)) #PPV:  ppv=sum(simPatientsPR[, 1] > 365) / nrow(simPatientsPR) #NPV: npv=sum(simPatientsPD[, 1] < 365) / nrow(simPatientsPD) #Sensitivity sens=sum(simPatientsPR[, 1] > 365) / (sum(simPatientsPR[, 1] > 365) + sum(simPatientsPD[, 1] > 365)) #Specificity spec=sum(simPatientsPD[, 1] < 365) / (sum(simPatientsPD[, 1] < 365) + sum(simPatientsPR[, 1] < 365)) 		data.frame(row=iRow,col=iCol, 			bcP=tmpCorrObj1['C Index'], 			bcU=tmpCorrObj1['C Index'] + 1.95996*tmpCorrObj1['S.D.']/2, 			bcL=tmpCorrObj1['C Index'] - 1.95996*tmpCorrObj1['S.D.']/2, 			lcP=tmpCorrObj2['C Index'], 			lcU=tmpCorrObj2['C Index'] + 1.95996*tmpCorrObj2['S.D.']/2, 			lcL=tmpCorrObj2['C Index'] - 1.95996*tmpCorrObj2['S.D.']/2, 			fcP=tmpCorrObj3['C Index'], 			fcU=tmpCorrObj3['C Index'] + 1.95996*tmpCorrObj3['S.D.']/2, 			fcL=tmpCorrObj3['C Index'] - 1.95996*tmpCorrObj3['S.D.']/2, 			lr.BCcs=tmpLRcs1, lr.BCdf=tmpLRdf1, lr.BCp=tmpLRp1, 			lr.LCcs=tmpLRcs2, lr.LCdf=tmpLRdf2, lr.LCp=tmpLRp2,             lr.FCcs = tmpLRcs3, lr.FCdf = tmpLRdf3, lr.FCp = tmpLRp3,             ppv ,             npv ,             sens,             spec              ) 		} 		else { 			data.frame(row=iRow,col=iCol, 			bcP=0,bcU=0,bcL=0,lcP=0,lcU=0,lcL=0,fcP=0,fcU=0,fcL=0, 			lr.BCcs=0,lr.BCdf=0,lr.BCp=1, 			lr.LCcs=0,lr.LCdf=0,lr.LCp=1, 			lr.FCcs=0,lr.FCdf=0,lr.FCp=1)         } } stopCluster(cl) tmpParOutput=tmpParOutput[order(tmpParOutput$row,tmpParOutput$col),] corr.bestClass$npv = matrix(tmpParOutput$npv, nrow = tmpN, ncol = tmpN, byrow = TRUE) corr.bestClass$ppv = matrix(tmpParOutput$ppv, nrow = tmpN, ncol = tmpN, byrow = TRUE) corr.bestClass$spec = matrix(tmpParOutput$spec, nrow = tmpN, ncol = tmpN, byrow = TRUE) corr.bestClass$sense = matrix(tmpParOutput$sense, nrow = tmpN, ncol = tmpN, byrow = TRUE) corr.bestClass$perf=matrix(tmpParOutput$bcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.bestClass$up95=matrix(tmpParOutput$bcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.bestClass$lo95=matrix(tmpParOutput$bcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$perf=matrix(tmpParOutput$lcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$up95=matrix(tmpParOutput$lcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.lastClass$lo95=matrix(tmpParOutput$lcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$perf=matrix(tmpParOutput$fcP,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$up95=matrix(tmpParOutput$fcU,nrow=tmpN,ncol=tmpN,byrow=TRUE) corr.firstClass$lo95=matrix(tmpParOutput$fcL,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$chisq=matrix(tmpParOutput$lr.BCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$df=matrix(tmpParOutput$lr.BCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.bestClass$p=matrix(tmpParOutput$lr.BCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$chisq=matrix(tmpParOutput$lr.LCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$df=matrix(tmpParOutput$lr.LCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.lastClass$p=matrix(tmpParOutput$lr.LCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$chisq=matrix(tmpParOutput$lr.FCcs,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$df=matrix(tmpParOutput$lr.FCdf,nrow=tmpN,ncol=tmpN,byrow=TRUE) logrank.firstClass$p=matrix(tmpParOutput$lr.FCp,nrow=tmpN,ncol=tmpN,byrow=TRUE) # find the maximal statistics corr.bestClass$max=max(corr.bestClass$perf,na.rm=TRUE) corr.bestClass$max.PR=corr.Cuts[arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[1]] corr.bestClass$max.PD=corr.Cuts[arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[2]] corr.bestClass$perf.stdev=with(corr.bestClass,(up95-perf)/1.95996) corr.bestClass$max.indPR=arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[1] corr.bestClass$max.indPD=arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))[2] corr.lastClass$max=max(corr.lastClass$perf,na.rm=TRUE) corr.lastClass$max.PR=corr.Cuts[arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[1]] corr.lastClass$max.PD=corr.Cuts[arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[2]] corr.lastClass$perf.stdev=with(corr.lastClass,(up95-perf)/1.95996) corr.lastClass$max.indPR=arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[1] corr.lastClass$max.indPD=arrayInd(which.max(corr.lastClass$perf),dim(corr.lastClass$perf))[2] corr.firstClass$max=max(corr.firstClass$perf,na.rm=TRUE) corr.firstClass$max.PR=corr.Cuts[arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[1]] corr.firstClass$max.PD=corr.Cuts[arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[2]] corr.firstClass$perf.stdev=with(corr.firstClass,(up95-perf)/1.95996) corr.firstClass$max.indPR=arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[1] corr.firstClass$max.indPD=arrayInd(which.max(corr.firstClass$perf),dim(corr.firstClass$perf))[2] logrank.bestClass$min=min(logrank.bestClass$p,na.rm=TRUE) logrank.bestClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.bestClass$p),dim(logrank.bestClass$p))[1]] logrank.bestClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.bestClass$p),dim(logrank.bestClass$p))[2]] logrank.lastClass$min=min(logrank.lastClass$p,na.rm=TRUE) logrank.lastClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.lastClass$p),dim(logrank.lastClass$p))[1]] logrank.lastClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.lastClass$p),dim(logrank.lastClass$p))[2]] logrank.firstClass$min=min(logrank.firstClass$p,na.rm=TRUE) logrank.firstClass$min.PR=corr.Cuts[arrayInd(which.min(logrank.firstClass$p),dim(logrank.firstClass$p))[1]] logrank.firstClass$min.PD=corr.Cuts[arrayInd(which.min(logrank.firstClass$p),dim(logrank.firstClass$p))[2]] # calculate significance matrices for each result against the std model. tmpCurPR=match(-0.3,round(corr.Cuts,5)) tmpCurPD=match(0.2,round(corr.Cuts,5)) tmpData=corr.bestClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.bestClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) tmpData=corr.firstClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.firstClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) tmpData=corr.lastClass tmpStdPerf=with(tmpData,(perf[tmpCurPR,tmpCurPD])) tmpStdStdev=with(tmpData,(perf.stdev[tmpCurPR,tmpCurPD])) tmpDiff=tmpData$perf-tmpStdPerf tmpStdev=sqrt(tmpData$perf.stdev^2+tmpStdStdev^2) tmpZ=tmpDiff/tmpStdev tmpZ[is.nan(tmpZ)]=0 tmpZ[tmpData$perf==0]=0 corr.lastClass$perf.p=pnorm(tmpZ,lower.tail=FALSE) # find the minimum p-value corr.bestClass$minP=min(corr.bestClass$perf.p,na.rm=TRUE) corr.bestClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.bestClass$perf.p),dim(corr.bestClass$perf.p))[1]] corr.bestClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.bestClass$perf.p),dim(corr.bestClass$perf.p))[2]] corr.lastClass$minP=min(corr.lastClass$perf.p,na.rm=TRUE) corr.lastClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.lastClass$perf.p),dim(corr.lastClass$perf.p))[1]] corr.lastClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.lastClass$perf.p),dim(corr.lastClass$perf.p))[2]] corr.firstClass$minP=min(corr.firstClass$perf.p,na.rm=TRUE) corr.firstClass$minP.PR=corr.Cuts[arrayInd(which.min(corr.firstClass$perf.p),dim(corr.firstClass$perf.p))[1]] corr.firstClass$minP.PD=corr.Cuts[arrayInd(which.min(corr.firstClass$perf.p),dim(corr.firstClass$perf.p))[2]] return(list( 	corr.bestClass=corr.bestClass, 	corr.lastClass=corr.lastClass, 	corr.firstClass=corr.firstClass, 	logrank.bestClass=logrank.bestClass, 	logrank.lastClass=logrank.lastClass,     logrank.firstClass = logrank.firstClass     )) }
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
simSurvivalTimes
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
survTimes = simDataFullCols$SurvTimeDays
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
measChange = simDataFullCols$source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
length(survTimes)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
survTimes==simSurvivalTimes
measChange==simMeasChange
measChange
measChange = dataFullCols$Recist2
survTimes = dataFullCols$SurvTimeDays
survTimes
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
seq(-1, 1, by = 0.05)
seq(-0.3source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R"))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
corr.Cuts
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
c(NA,1:5)
max(c(NA,1:5))
max(c(NA,1:5),na.rm = TRUE)
sense
sens
corr.bestClass$sens
matrix(c(1:10),nrow = 5)
max(matrix(c(1:10),nrow = 5))
max(corr.bestClass$sens,na.rm = TRUE)
max(corr.bestClass$spec,na.rm = TRUE)
max(corr.bestClass$ppv, na.rm = TRUE)
max(corr.bestClass$npv, na.rm = TRUE)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
a.@.hi=c(1:10)
a.1=c(1:2)
a.1
a.1@2=c(01:2)
rm(a.1)
?arrayInd
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
list(1,2,3,4)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
corr.Cuts[arrayInd(which.max(corr.bestClass$perf), dim(corr.bestClass$perf))[1]]
which.max(corr.bestClass$perf)
?which.max
dim(corr.bestClass$perf)
arrayInd(which.max(corr.bestClass$perf), dim(corr.bestClass$perf))
arrayInd(which.max(corr.bestClass$perf), dim(corr.bestClass$perf))[1]
corr.Cuts[15]
arrayInd(which.max(corr.bestClass$perf), dim(corr.bestClass$perf))
?arrayInd
which.max(corr.bestClass$perf)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
arrayInd(which.max(corr.bestClass$perf), dim(corr.bestClass$perf))[1]
corr.Cuts[15]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
npv
corr.bestClass$npv
corr.bestClass$npv[1,1]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
load(tmpDataFile)
tmpDataDir = file.path('C:', 'Users','Justin','Documents','_UC intern','AustraliaLinearResponse') tmpDataFile = file.path(tmpDataDir, 'SimulatedData_100Patients.rdata') load(tmpDataFile)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R", echo = TRUE)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
flagVaryPatientNumber=FALSE
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
file.path(tmpScriptDir, 'importData_Simulation.R')
tmpBaseDir = file.path('C:','Users','Justin','Documents','_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)
source(file.path(tmpScriptDir, 'importData_Simulation.R'))
source(file.path(tmpScriptDir, 'generateSimulatedData.R'))
source(file.path(tmpScriptDir, 'importData_Simulation.R'))
tmpBaseDir = file.path('C:','Users','Justin','Documents','_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)
source(file.path(tmpScriptDir, 'importData_Simulation.R'))
source(file.path(tmpScriptDir, 'generateSimulatedData.R'))
tmpBaseDir = file.path('C:','Users','Justin','Documents','_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)
source(file.path(tmpScriptDir, 'importData_Simulation.R'))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
# Analyze simulated patient data to see how the optimization compares to when we have real data. # # Before running this script, either: # i) run the 'importData.R' script, followed by the 'generateSimulatedData.R' script. # ii) Load pre-generated simulated patient data, using the 'importData_Simulation.R' script, or #   manually loading it through the user interface. # # Once the simulated data is generated/loaded, this script runs the analysis on the simulated data. # # # Written by E Gudmundsson, June 2017 ###((Run 'importData_Simulation.R', followed by 'generateSimulatedData.R'### #plot(simSurvivalTimes, simMeasChange, #xlim = c(min(simSurvivalTimes), max(simSurvivalTimes)), #ylim = c(0, max(simMeasChange)), #xlab = "Survival Time", #ylab = "Change in Disease") # Flags indicating how to optimize flagMidPercentile = FALSE midPercentile = 80 flagCloseToClinical = FALSE flagCloseToClinicalNo0 = FALSE # vary the RECIST cutoffs and see what happens. tmpBaseDir = file.path('C:','Users','Justin','Documents','_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName) library(Hmisc) flagVaryPatientNumber=FALSE if (flagVaryPatientNumber == TRUE) { source(file.path(tmpScriptDir, 'importData_Simulation.R')) source(file.path(tmpScriptDir, 'generateSimulatedData.R')) } else { source(file.path(tmpScriptDir, 'importData_Simulation.R')) } # calculate some of the continuous metrics, since those are independent of the loops corr.Continuous = list() corr.Continuous$bestChange = rcorr.cens(-simDataContinuous$RecistBest,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) corr.Continuous$lastChange = rcorr.cens(-simDataContinuous$RecistChangeN,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) corr.Continuous$firstChange = rcorr.cens(-simDataContinuous$RecistChange2,     Surv(simDataContinuous$SurvTimeDays, simDataContinuous$Status), outx = TRUE) source(file.path(tmpScriptDir, 'createThresholds.R')) # do the variable cutpoint thing for the whole dataset source(file.path(tmpScriptDir, 'funcPerfMetrics.R')) tmpOutput = perf.metrics(corr.Cuts, simDataFullCols, simLinRECIST, classRECIST) corr.bestClass = tmpOutput$corr.bestClass corr.firstClass = tmpOutput$corr.firstClass corr.lastClass = tmpOutput$corr.lastClass logrank.bestClass = tmpOutput$logrank.bestClass logrank.firstClass = tmpOutput$logrank.firstClass logrank.lastClass = tmpOutput$logrank.lastClass save(list = c(     ls(pattern = 'corr.+'),     ls(pattern = 'logrank.+')),     file = file.path(tmpDataDir, 'SimulatedDataSetPerformance.rdata')) rm(list = ls(pattern = 'tmp.*')) rm(list = ls(pattern = 'i[[:upper:]]'))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
file.path(tmpBaseDir, tmpProjName, tmpProjName)
tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)
tmpBaseDir = file.path('C:','Users','Justin','Documents','_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)
tmpScriptDir
source(file.path('C:/Users/Justin/Documents/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse', 'importData_Simulation.R'))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/script.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/script.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/script.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
?file.path
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbers = list()
pring(variedPatientNumbers)
print(variedPatientNumbers)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbers[1]<-1
variedPatientNumbers[5]<-4
matrix(variedPatientNumbers)
variedPatientNumbers=list()
matrix(1,)
matrix(1,2)
variedPatientNumbers[1,] <- matrix(c(1,2))
variedPatientNumbers[1,] <- matrix(c(1,2),nrow = 1)
matrix(c(1,2))
variedPatientNumbers[1,] <- t(matrix(c(1,2)))
matrix(c(1,2))
variedPatientNumbers[1]<-c(1,5)
variedPatientNumbers[1,] <- c(1,5)
variedPatientNumbers[1] <- matrix(c(1:10),nrow = 2)
nSimulatedPatients
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbers
mat <- matrix(, nrow = 15, ncol = n.columns) for (column in 1:n.columns) {     mat[, column] <- c(1:5) }
mat <- matrix(, nrow = 15, ncol = 5) for (column in 1:5) {     mat[, column] <- c(1:5) }
mat <- matrix(, nrow = 15, ncol = 5) for (column in 1:nrow) {     mat[, column] <- c(1:5) }
mat <- matrix(, nrow = 15, ncol = 5) for (column in 1:nrow) {     mat[, column] <- c(1:5) }
mat <- matrix(, nrow = 15, ncol = 5) for (column in 1:15) {     mat[, column] <- c(1:5) }
mat <- matrix(, nrow = 15, ncol = 5) for (column in 1:15) {     mat[, column] <- c(1:2) }
mat <- matrix(, nrow = 15, ncol = 5) for (row in 1:15) {     mat[row,] <- c(1:2) }
mat <- matrix(, nrow = 15, ncol = 5) for (row in 1:15) {     mat[row,] <- c(1:5) }
rm(column)
nSimulatedPatients=c(50, 60, 70, 100, 150, 200, 300, 500) mat <- matrix(, nrow = length(nSimulatedPatients), ncol = 5) for (row in 1:length(nSimulatedPatients)) {     mat[row,] <- c(1:5) }
nSimulatedPatients=c(50, 60, 70, 100, 150, 200, 300, 500) mat <- matrix(, nrow = length(nSimulatedPatients), ncol = 6) for (row in 1:length(nSimulatedPatients)) {     mat[row,] <- c(nSimulatedPatients[row],1:5) }
rm(mat)
nSimulatedPatients=c(50, 60, 70, 100, 150, 200, 300, 500) variedPatientNumbers <- matrix(, nrow = length(nSimulatedPatients), ncol = 6) for (row in 1:length(nSimulatedPatients)) {     variedPatientNumbers[row,] <- c(nSimulatedPatients[row], 1:5) }
nSimulatedPatients=c(50, 60, 70, 100, 150, 200, 300, 500) variedPatientNumbers <- matrix(, nrow = length(nSimulatedPatients), ncol = 6) variedPatientNumbers[1,]<-c(nSimulatedPatients,c(1:5))
nSimulatedPatients=c(50, 60, 70, 100, 150, 200, 300, 500) variedPatientNumbers <- matrix(, nrow = length(nSimulatedPatients), ncol = 6)
variedPatientNumbers[1,]<-c(nSimulatedPatients,c(1:5))
c(nSimulatedPatients, c(1:5))
nSimulatedPatients=c(50, 60, 70, 100, 150, 200, 300, 500) variedPatientNumbers <- matrix(, nrow = length(nSimulatedPatients), ncol = 6) variedPatientNumbers[1,]<-c(nSimulatedPatients[1],c(1:5))
nSimulatedPatients=c(50, 60, 70, 100, 150, 200, 300, 500) variedPatientNumbers <- matrix(, , ncol = 6) variedPatientNumbers[1,]<-c(nSimulatedPatients[1],c(1:5))
variedPatientNumbers[2,]<-c(nSimulatedPatients[1],c(1:5))
rbind(variedPatientNumbers, c(nSimulatedPatients[1], c(1:5)))
variedPatientNumbers <- matrix(, , ncol = 6)
rbind(variedPatientNumbers, c(nSimulatedPatients[1], c(1:5)))
nSimulatedPatients=c(50, 60, 70, 100, 150, 200, 300, 500) variedPatientNumbers <- matrix(, , ncol = 6) rbind(variedPatientNumbers, c(nSimulatedPatients[1], c(1:5)))
nSimulatedPatients=c(50, 60, 70, 100, 150, 200, 300, 500) variedPatientNumbers <- matrix(,nrow = 0 , ncol = 6) rbind(variedPatientNumbers, c(nSimulatedPatients[1], c(1:5)))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData
rbind(variedPatientNumbersData, c(nSimulatedPatients, c(1:5)))
variedPatientNumbersData
variedPatientNumbersData<-rbind(variedPatientNumbersData, c(nSimulatedPatients, c(1:5)))
variedPatientNumbersData <- rbind(variedPatientNumbersData, c(nSimulatedPatients, c(1:5)))
variedPatientNumbersData
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
nSimulatedPatients, corr.bestClass$max.C, corr.bestClass$max.C.npv, corr.bestClass$max.C.ppv, corr.bestClass$max.C.spec, corr.bestClass$max.C.sens)) c(nSimulatedPatients, corr.bestClass$max.C, corr.bestClass$max.C.npv, corr.bestClass$max.C.ppv, corr.bestClass$max.C.spec, corr.bestClass$max.C.sens)
c(nSimulatedPatients,corr.bestClass$max.C, corr.bestClass$max.C.npv, corr.bestClass$max.C.ppv, corr.bestClass$max.C.spec, corr.bestClass$max.C.sens)
corr.bestClass$max.C
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
c(     nSimulatedPatients, corr.bestClass$max.stats$max.C, corr.bestClass$max.stats$max.npv, corr.bestClass$max.stats$max.ppv, corr.bestClass$max.stats$max.spec, corr.bestClass$max.stats$max.sens))
c(     nSimulatedPatients, corr.bestClass$max.stats$max.C, corr.bestClass$max.stats$max.npv, corr.bestClass$max.stats$max.ppv, corr.bestClass$max.stats$max.spec, corr.bestClass$max.stats$max.sens)
rbind(     variedPatientNumbersData, c(     nSimulatedPatients, corr.bestClass$max.stats$max.C, corr.bestClass$max.stats$max.C.npv, corr.bestClass$max.stats$max.C.ppv, corr.bestClass$max.stats$max.C.spec, corr.bestClass$max.stats$max.C.sens))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
c(100)
c(100)[1]
c(     nSimulatedPatients, corr.bestClass$max.stats$max.C, corr.bestClass$max.stats$max.C.npv, corr.bestClass$max.stats$max.C.ppv, corr.bestClass$max.stats$max.C.spec, corr.bestClass$max.stats$max.C.sens))
c(     nSimulatedPatients, corr.bestClass$max.stats$max.C, corr.bestClass$max.stats$max.C.npv, corr.bestClass$max.stats$max.C.ppv, corr.bestClass$max.stats$max.C.spec, corr.bestClass$max.stats$max.C.sens)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData = rbind(     variedPatientNumbersData, c(     nSimulatedPatients, corr.bestClass$max.stats$max.C, corr.bestClass$max.stats$max.C.npv, corr.bestClass$max.stats$max.C.ppv, corr.bestClass$max.stats$max.C.spec, corr.bestClass$max.stats$max.C.sens)) print(variedPatientNumbersData)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
corr.bestClass$max.stats$max.C
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData
 source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData <- matrix(, nrow = 0, ncol = 6) variedPatientNumbersData = rbind(     variedPatientNumbersData,     c(         nSimulatedPatients,         corr.bestClass$max.stats$max.C,         corr.bestClass$max.stats$max.C.npv,         corr.bestClass$max.stats$max.C.ppv,         corr.bestClass$max.stats$max.C.spec,         corr.bestClass$max.stats$max.C.sens         )     )
variedPatientNumbersData = rbind(     variedPatientNumbersData,     c(         nSimulatedPatients,         corr.bestClass$max.stats$max.C,         corr.bestClass$max.stats$max.C.npv,         corr.bestClass$max.stats$max.C.ppv,         corr.bestClass$max.stats$max.C.spec,         corr.bestClass$max.stats$max.C.sens         )     )
variedPatientNumbersData = rbind(     variedPatientNumbersData,     c(         nSimulatedPatients,         corr.bestClass$max.stats$max.C,         corr.bestClass$max.stats$max.C.npv,         corr.bestClass$max.stats$max.C.ppv,         corr.bestClass$max.stats$max.C.spec,         corr.bestClass$max.stats$max.C.sens         )     )
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
#FIND way to put data into the varied Paitnet Numbers Data matrix 
#Need to put Forloop bigger. not only around generateSimulated Data,but also around funcPerMatrics source part.source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')     tmpProjName = 'AustraliaLinearResponse'     tmpDataDir = file.path(tmpBaseDir, tmpProjName)     tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)     source(file.path(tmpScriptDir, 'generateSimulatedData.R'))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData <- matrix(, nrow = 0, ncol = 6)
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6))
?data.frame
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"> variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"))))
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"> variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c(1:6))))
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"> variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c(1:5))))
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"> variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c(1:1))))
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"> variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),rownames=c(1:1))))
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"> variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),rownames=c(1:10))))
?data.frame
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"> variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),row.names=c(1:10))))
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"> variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),row.names=c(1:1))))
variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),colnames=c("Number of Simulated Patients","Max c-stat","NPV at Max c","PPV at Max c","Spec at Max c","Sens at Max c"> variedPatientNumbersData <-data.frame( matrix(, nrow = 0, ncol = 6),row.names=c(1:1))))source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
colnames(variedPatientNumbersData) <- c(1:6)
colnames(variedPatientNumbersData) <- c("Number of Simulated Patients","max c-stat","NPV at max c-stat","PPV at max c-stat","spec at max c-stat","sens at max c-stat")
colnames(variedPatientNumbersData) <- c("Number of Simulated Patients","max c-stat","NPV @ max.C","PPV at max c-stat","spec at max c-stat","sens at max c-stat")
colnames(variedPatientNumbersData) <- c("Number of Simulated Patients","max c-stat","NPV @ max.C","PPV @ max.C","spec @ max.C","sens @ max.C")
colnames(variedPatientNumbersData) <- c("Number of Simulated Patients","max c-stat","NPV @ max.C","PPV @ max.C","spec @ max.C","sens @ max.C")
colnames(variedPatientNumbersData) <- c("nSimulatedPatients","max.C","NPV @ max.C","PPV @ max.C","spec @ max.C","sens @ max.C")
colnames(variedPatientNumbersData) <- c("nSimulatedPatients","max.C","NPV @ max.C","PPV @ max.C","spec @ max.C","sens @ max.C")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
variedPatientNumbersData[,1]
matplot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3])
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3])
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3])
?points
?points
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,2])    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,3])    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,4])    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,5])    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,6])    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,7])    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,8])    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,9])    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,10])    
plot(variedPatientNumbersData[,1],c(variedPatientNumbersData[,1]))    
plot(variedPatientNumbersData[,1],c(variedPatientNumbersData[,1],variedPatientNumbersData[,2]))    
plot(variedPatientNumbersData[,1],c(variedPatientNumbersData[,2],variedPatientNumbersData[,2]))    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,2]))    
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,2])    
    points(variedPatientNumbersData[,1],variedPatientNumbersData[,3])
    points(variedPatientNumbersData[,1],variedPatientNumbersData[,5])
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],ylim=c(0,1))
    points(variedPatientNumbersData[,1],variedPatientNumbersData[,5])
    points(variedPatientNumbersData[,1],variedPatientNumbersData[,5],col="red")
    abline(lm(variedPatientNumbersData[, 1]~ variedPatientNumbersData[, 5]))
    abline(lm(variedPatientNumbersData[, 2]~ variedPatientNumbersData[, 1]))
    abline(lm(variedPatientNumbersData[, 3]~ variedPatientNumbersData[, 1]))
    abline(smooth.spline(variedPatientNumbersData[, 3]~ variedPatientNumbersData[, 1]))
    lines(smooth.spline(variedPatientNumbersData[, 3]~ variedPatientNumbersData[, 1]))
?smooth.spline
    smooth.spline(variedPatientNumbersData[, 3]~ variedPatientNumbersData[, 1])
    smooth.spline(variedPatientNumbersData[, 3], variedPatientNumbersData[, 1])
    smooth.spline(variedPatientNumbersData[, 3], variedPatientNumbersData[,1])
    smooth.spline(variedPatientNumbersData[,3], variedPatientNumbersData[,1])
    smooth.spline(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3])
    smooth.spline(variedPatientNumbersData[,1], variedPatientNumbersData[,3])
?smooth.spline
    scatter.smooth(variedPatientNumbersData[,1], variedPatientNumbersData[,3])
warnings()
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3],col="red")
variedPatientNumbersData[, 3]
variedPatientNumbersData[, 3]
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="red")
c(50, 60, 70, 100, 150, 200, 300, 500)
c(50:100)
c(50:100,5)
?seq
seq(from=50,to=100,by=10)
c(seq(from=50,to=100,by=10))
c(seq(from = 50, to = 100, by = 10), c(seq(from = 150, to = 500, by = 50)))
length(c(seq(from = 50, to = 100, by = 10), c(seq(from = 150, to = 500, by = 50))))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0, 1))
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0, 1))
    plot(0, xlim=c(0,500),ylim = c(0, 1), xlab = 'nSimulatedPatients')
    plot(, xlim=c(0,500),ylim = c(0, 1), xlab = 'nSimulatedPatients')
    plot(, xlim=c(0,500),ylim = c(0, 1), xlab = 'nSimulatedPatients')
    plot(list(), xlim=c(0,500),ylim = c(0, 1), xlab = 'nSimulatedPatients')
    plot(list(),list(), xlim=c(0,500),ylim = c(0, 1), xlab = 'nSimulatedPatients')
    plot(list(),list(), xlim=c(0,500),ylim = c(0, 1), xlab = 'nSimulatedPatients')
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
    plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients')     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
dim(variedPatientNumbersData)
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients')     for (i in 1:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])     } rm(i)
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])     } rm(i)
    plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')
    plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])     } rm(i)
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i],color=rgb(c(i,i,i)/10))         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = rgb(c(i, i, i) / 10))     } rm(i)
rgb(c(i, i, i) / 10)
rgb(c(1,1,1)/10)
rgb(1,1,1)
    plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i],color=colors()[i])         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = colors()[i])     } rm(i)
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i],color=colors()[i+100])         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = colors()[i])     } rm(i)
colors()[10 + 100]
colors()[c(552, 254, 26)]
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = colors()[i])         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = colors()[i])     } rm(i)
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = colors()[c(i)])         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = colors()[c(i)])     } rm(i)
colors()[c(10)]
colors()[c(5,3,3)]
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = colors()[c(i,i,i)])         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = colors()[c(i,i,i)])     } rm(i)
matplot(variedPatientNumbersData)
matrix(runif(40, 1, 20), ncol = 4)
variedPatientNumbersData
matrix(variedPatientNumbersData)
    plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i], color = colors()[c(i,i,i)])        )     } rm(i)
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])        )     }
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])        )     } rm(i)
    plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])        )     }
    plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')
   plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])     }
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i]),              lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])     } rm(i)
    plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')
for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i]),         lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, i])     }
        points(variedPatientNumbersData[, 1], variedPatientNumbersData[, i]),
        points(variedPatientNumbersData[,1], variedPatientNumbersData[, i]),
        lines(variedPatientNumbersData[,1], variedPatientNumbersData[, i])
        points(variedPatientNumbersData[,1],variedPatientNumbersData[, i]),
        points(variedPatientNumbersData[,1],variedPatientNumbersData[, i])
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[,1],variedPatientNumbersData[, i])         lines(variedPatientNumbersData[,1], variedPatientNumbersData[, i])     }
plot(variedPatientNumbersData)
rm(i)     plot(list(),list(), xlim=c(50,500),ylim = c(0, 1), xlab = 'nSimulatedPatients',ylab='metric value')     for (i in 2:dim(variedPatientNumbersData)[2]) {         points(variedPatientNumbersData[,1],variedPatientNumbersData[, i])         lines(variedPatientNumbersData[,1], variedPatientNumbersData[, i])     } rm(i)
plot(variedPatientNumbersData[,1],variedPatientNumbersData[,2])
    lines(variedPatientNumbersData[,1],variedPatientNumbersData[,2])
> plot(variedPatientNumbersData[,1],variedPatientNumbersData[,2])
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
    c(seq(from = 50, to = 100, by = 10), c(seq(from = 150, to = 500, by = 50)))
nVarySimulatedPatients =      c(seq(from = 50, to = 100, by = 10), c(seq(from = 150, to = 500, by = 50)))
nVarySimulatedPatients
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3])     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4])     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5])     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6])
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3],color='red')
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3],color="red")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],ylim=c(0,1))
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3],color="red")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3])
?plot
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3],col="red")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5],col="purple")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6]="orange")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6]="orange")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6],col="orange")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],ylim=c(0,1))     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3],col="red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5],col="purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6],col="orange")
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],ylim=c(0,1))     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")
 plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0, 1))     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")
 plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.3, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],type="b")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))
  plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],type="b")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],type="b")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],type="b")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
  plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],type="c")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4],col="blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 5], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 6], col = "orange")
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red",na.rm=TRUE)
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red",na.rm=TRUE)
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red",na.rm=TRUE)
    points(variedPatientNumbersData[, 1], na.omit(variedPatientNumbersData[, 3]),type="l" ,col = "red",na.rm=TRUE)
    points(variedPatientNumbersData[, 1], na.omit(variedPatientNumbersData[, 3]),type="l" ,col = "red")
na.omit(variedPatientNumbersData[, 3])
which(is.na(variedPatientNumbersData[,3]))
variedPatientNumbersData[,1]
variedPatientNumbersData[,1][-1]
c(which(is.na(variedPatientNumbersData[, 3])))
variedPatientNumbersData[, 1][c(which(is.na(variedPatientNumbersData[, 3])))]
variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))]
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))], na.omit(variedPatientNumbersData[, 3]), type = "l", col = "red")
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")
 plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         na.omit(variedPatientNumbersData[, 3]), type = "l", col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         na.omit(variedPatientNumbersData[, 3]), type = "l", col = "red")
  plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         na.omit(variedPatientNumbersData[, 3]), type = "l", col = "red")
variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))]
na.omit(variedPatientNumbersData[, 3])
        variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], col = "red")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 4], col = "blue")
lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")
        variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "dark orange")
        variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange")
        variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkOrange")
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkOrange")
   points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkOrange")
        variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")
# plotting the max c-statistic and npv,ppv,spec,sens at the max c-statistic     plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
 plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
        variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=(0.2,1))
  plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 7])))],         variedPatientNumbersData[, 7][-c(which(is.na(variedPatientNumbersData[, 7])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 7])))],         variedPatientNumbersData[, 7][-c(which(is.na(variedPatientNumbersData[, 7])))], col = "red")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 7])))],         variedPatientNumbersData[, 7][-c(which(is.na(variedPatientNumbersData[, 7])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 7])))],         variedPatientNumbersData[, 7][-c(which(is.na(variedPatientNumbersData[, 7])))], col = "red")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 7])))],         variedPatientNumbersData[, 7][-c(which(is.na(variedPatientNumbersData[, 7])))], col = "red")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3])     plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 3])
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
     plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8])
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9])
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")
   points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8])
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8])
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple"))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9])
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "purple")
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="darkred")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="darkred")
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "darkblue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "darkblue")
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "darkpurple")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "darkpurple")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="pink")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="pink")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="darkpink")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")
    lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")
    points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10])
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")
    points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "orange")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="darkorange2")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="darkorange2")
    plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1))     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="orage")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="orange")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",ylim=c(0.2,1))     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")
# plotting the max c-statistic and npv,ppv,spec,sens at the max c-statistic     plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1),xlab="nSimulatedPatients",ylab="metric value")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")
   plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="orage")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="orange")
# plotting npv when max c and max npv     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")
# plotting ppv when max c and max ppv     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")
    plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")
# plotting spec when max c and max spec     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")
# plotting sens when max c and max sens     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="orange")
# plotting the max c-statistic and npv,ppv,spec,sens at the max c-statistic     plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1),xlab="nSimulatedPatients",ylab="metric value")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2") # plotting npv when max c and max npv     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7],col="lightcoral") # plotting ppv when max c and max ppv     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue") # plotting spec when max c and max spec     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1") # plotting sens when max c and max sens     plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")     lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")     points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="orange")     lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10],col="orange")
flagPlotMetrics = TRUE     if (flagPlotMetrics == TRUE) {         tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')         tmpProjName = 'AustraliaLinearResponse'         tmpDataDir = file.path(tmpBaseDir, tmpProjName)         tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)         source(file.path(tmpScriptDir, 'importData_Simulation.R'))     } else { }
flagPlotMetrics = TRUE     if (flagPlotMetrics == TRUE) {         tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')         tmpProjName = 'AustraliaLinearResponse'         tmpDataDir = file.path(tmpBaseDir, tmpProjName)         tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)         source(file.path(tmpScriptDir, 'importData_Simulation.R'))     } else { }
flagPlotMetrics = TRUE
 if (flagPlotMetrics == TRUE) {         tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')         tmpProjName = 'AustraliaLinearResponse'         tmpDataDir = file.path(tmpBaseDir, tmpProjName)         tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)         source(file.path(tmpScriptDir, 'importData_Simulation.R'))     }
flagPlotMetrics = TRUE     if (flagPlotMetrics == TRUE) {         tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')         tmpProjName = 'AustraliaLinearResponse'         tmpDataDir = file.path(tmpBaseDir, tmpProjName)         tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)         source(file.path(tmpScriptDir, 'importData_Simulation.R'))     } 
flagPlotMetrics = TRUE     if (flagPlotMetrics == TRUE) {         tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')         tmpProjName = 'AustraliaLinearResponse'         tmpDataDir = file.path(tmpBaseDir, tmpProjName)         tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)         source(file.path(tmpScriptDir, 'importData_Simulation.R'))     } 
flagPlotMetrics = TRUE     if (flagPlotMetrics == TRUE) {         tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')         tmpProjName = 'AustraliaLinearResponse'         tmpDataDir = file.path(tmpBaseDir, tmpProjName)         tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)         source(file.path(tmpScriptDir, 'plotMetrics.R'))     } 
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
flagPlotMetrics = TRUE     if (flagPlotMetrics == TRUE) {         tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')         tmpProjName = 'AustraliaLinearResponse'         tmpDataDir = file.path(tmpBaseDir, tmpProjName)         tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)         source(file.path(tmpScriptDir, 'plotMetrics.R'))     } else { }
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
exists(simDataFullCols)
exists("simDataFullCols")
print(exists("simDataFullCols"))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
head(simDataFullCols,1)
length(head(simDataFullCols,1))
dim(head(simDataFullCols,1))
dim(head(simDataFullCols, 10))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
            simTestSet = tail(simLinRECIST, 40)
simTestSet
intersect(simTestSet,simLinRECIST)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
intersect(simTestSet,simLinRECIST)
simTestSet[1]
simTestSet[1][]1
simTestSet[1][1]
simTestSet[1][1][1]
simTestSet[[1]]
simTestSet[[1]][[1]]
simTestSet[1][[1]]
simTestSet[[1]][1]
simTestSet[[1]][['meas']]
simTestSet[[1]][['SurvTimeDays']]
simTestSet[[1]][['meas']][2]
simTestSet[[1]][['meas']][[2]]
lapply(simTestSet, `[[`, c('meas')))
lapply(simTestSet, `[[`, c('meas'))
lapply(simTestSet, `[[`, c('meas'))[1]
lapply(simTestSet, `[[`, c('SurvTimeDays'))[1]
lapply(simTestSet, `[[`, c('SurvTimeDays'))
            lapply(simTestSet, `[[`, c('meas'))lapply(simTestSet, `[[`, c('meas'))
            lapply(simTestSet, `[[`,c('meas'))
            lapply(simTestSet, `[[`,c('meas'))
lapply(lapply(simTestSet, `[[`,c('meas')),'[',2)
lapply(lapply(simTestSet, `[[`,c('meas')),'[',2)[[1]]
lapply(simTestSet, `[[`, c('SurvTimeDays'))
lapply(lapply(simTestSet, `[[`,c('meas')),'[',2)
do.call(cbind, list(lapply(simTestSet, `[[`, c('SurvTimeDays'))))
            do.call(cbind,list(lapply(simTestSet, `[[`, c('SurvTimeDays'))))
            do.call(cbind,list(lapply(lapply(simTestSet, `[[`, c('meas')), '[', 2)))
                do.call(cbind,list(lapply(simTestSet, `[[`, c('SurvTimeDays')))))
cbind(do.call(cbind,list(lapply(lapply(simTestSet, `[[`, c('meas')), '[', 2))),                 do.call(cbind,list(lapply(simTestSet, `[[`, c('SurvTimeDays')))))
cbind(                 do.call(cbind, list(lapply(simTestSet, `[[`, c('SurvTimeDays')))),                 do.call(cbind, list(lapply(lapply(simTestSet, `[[`, c('meas')), '[', 2)))             )
simTimeChangePair
survTimes
simTestSet$SurvTimeDays
simPatientsPR
simTestSetTimeChangePair =             cbind(                 do.call(cbind, list(lapply(simTestSet, `[[`, c('SurvTimeDays')))),                 do.call(cbind, list(lapply(lapply(simTestSet, `[[`, c('meas')), '[', 2))))
simTestSetTimeChangePair
nrow(simTestSetTimeChangePair)
simTestSetPatientsPR = list() for (i in 1:nrow(simTestSetTimeChangePair)) {     if (simTestSetTimeChangePair[, 2][[i]] <= (1 + corr.bestClass$max.stats$max.C.PR)) {         simTestSetPatientsPR <- c(simTestSetPatientsPR, simTestSetTimeChangePair[i,])     } } rm(i) simTestSetPatientsPR <- t(matrix(simTestSetPatientsPR, nrow = 2))
simTestSetPatientsPR
i
simTestSetPatientsPD = list() for (i in 1:nrow(simTestSetTimeChangePair)) {     if (simTestSetTimeChangePair[, 2][[i]] >= (1 + (corr.bestClass$max.stats$max.C.PD))) {         simTestSetPatientsPD <- c(simTestSetPatientsPD, simTestSetTimeChangePair[i,])     } } rm(i) simTestSetPatientsPD <- t(matrix(simTestSetPatientsPD, nrow = 2))
simTestSetPatientsPD
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
length(simLinRECIST)
length(simLinRECIST)*0.6
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
testSet.TimeChangePair
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
length(simLinRECIST)
length(simDataFullCols)
dim(simLinRECIST)
dim(simDataFullCols)
dim(simDataFullCols)[1]
dim(simDataFullCols)[1]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
%trainingSet=1
percTrainingSet=1
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
train.test=list()
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
dim(train.test$trainSet)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
flagPlotMetrics = TRUE if (flagPlotMetrics == TRUE) {     tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')     tmpProjName = 'AustraliaLinearResponse'     tmpDataDir = file.path(tmpBaseDir, tmpProjName)     tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)     source(file.path(tmpScriptDir, 'plotMetrics.R')) } else { }
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = "darkorange2")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0,0.5)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0,0.5)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0, 0.5))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pchisq=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple")
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple",lwd=10)
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple",lwd=5)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple",lwd=5)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(1,1,0)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(1, 1, 0), lwd = 3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(1,1,0),0.5) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(1, 1, 0,0.5), lwd = 3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(1,1,0),pch=0) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(1, 1, 0,0.5), lwd = 3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(1,1,0),pch=0) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(1, 1, 0,0.5), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(1,1,0),pch=0) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(1, 1, 0,0.5), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.5),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(1,1,0),pch=0) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(1, 1, 0,0.5), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(1,1,0),pch=0) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(1, 1, 0,0.2), lwd = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.2),lwd=2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(1,1,0),pch=0) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(1, 1, 0,0.3), lwd = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1)) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(1,1,0),pch=0) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(1, 1, 0,0.3), lwd = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 2.5) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=2.5)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 2.5) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=2.5)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.35), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.35),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.35), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.35),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.35), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.35),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.35), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.35),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1.5) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1.5) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.35), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.35),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1.75) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1.75) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.35), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.35),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.35), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.35),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.35), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.35),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1.5) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.35), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.35),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=18) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=18) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=24) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=24) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=15) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=0.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=0.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 0.5, legend = c("maximum c-statistic", "Line 2"),        col = c("red", "blue"), lty = 1:2, cex = 0.8)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 0.5, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Spec at max c","Sens at max c"),        col = c("black", "red","blue","green","magenta"), lty = c(1,2,2,1,1), cex = 0.8)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 0.5, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Spec at max c","Sens at max c"),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)),pch = c(1,17,17,16,16), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
    ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2,pch=0) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)),pch = c(0,17,17,16,16), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2,pch=0) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)),pch = c(0,17,17,16,16), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2,pch=10) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)),pch = c(10,17,17,16,16), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)),pch = c(16,17,17,16,16), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=0.2) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
    ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=1.2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1,cex=1.2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 1.2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 1)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),cex = 1.2,        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3), cex = 0.8)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0, 0.25), rgb(1, 0, 1, 0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.25), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0), rgb(1, 0, 1)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0), rgb(1, 0, 1)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0,0.3), rgb(1, 0, 1),0.3), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0,0.3), rgb(1, 0, 1,0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend(400, 1, legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0,0.3), rgb(1, 0, 1,0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend("topright", legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0,0.3), rgb(1, 0, 1,0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red") points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Values of Metrics for Different Numbers of Simulated Patients", pch = 16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=2)
abline(variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))] ~ variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))])
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16) abline(variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))] ~ variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))])
abline(lm(variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))] ~ variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))]))
lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=2)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16) abline(lm(variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))] ~ variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))])) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=2)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16) abline(lm(variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))] ~ variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))])) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1)
points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pchisq=17)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,1,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,1,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend("topright", legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 1, 0,0.3), rgb(1, 0, 1,0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16) abline(lm(variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))] ~ variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))])) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16) abline(lm(variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))] ~ variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))])) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",lwd=3)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16) abline(lm(variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))] ~ variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))])) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2) abline(lm(variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))] ~ variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))])) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",lty=2) legend("topright", legend = c("NPV at max c", "Max NPV"), pch = c(16, 17),        col = c("red","lightcoral"), lty = c(1, 2), lwd = c(1, 1))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",lty=2) legend("topright", legend = c("NPV at max c", "Max NPV"), pch = c(16, 17),        col = c("red","lightcoral"), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",xlim=c(50,500), ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue") points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lwd = 1, lty = 1)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",lty=2) legend("topright", legend = c("NPV at max c", "Max NPV"), pch = c(16, 17),        col = c("red","lightcoral"), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightblue", lty = 2) legend("topright", legend = c("PPV at max c", "Max PPV"), pch = c(16, 17),        col = c("blue", "lightblue"), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.1, 1), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.1, 1), lty = 2) legend("topright", legend = c("PPV at max c", "Max PPV"), pch = c(16, 17),        col = c("blue", rgb(0.1,0.1,1)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.5, 1), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.5, 1), lty = 2) legend("topright", legend = c("PPV at max c", "Max PPV"), pch = c(16, 17),        col = c("blue", rgb(0.1,0.5,1)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), lty = 2) legend("topright", legend = c("PPV at max c", "Max PPV"), pch = c(16, 17),        col = c("blue", rgb(0.1,0.7,1)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), lty = 2) legend("bottomright", legend = c("PPV at max c", "Max PPV"), pch = c(16, 17),        col = c("blue", rgb(0.1,0.7,1)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",lty=2) legend("topright", legend = c("NPV at max c", "Max NPV"), pch = c(16, 17),        col = c("red","lightcoral"), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), lty = 2) legend("bottomright", legend = c("PPV at max c", "Max PPV"), pch = c(16, 17),        col = c("blue", rgb(0.1,0.7,1)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple", ylim = c(0.2, 1), xlab = "nSimulatedPatients", ylab = "metric value") lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple") points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1") lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1")
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1"), lty = 2) legend("bottomright", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c("blue", rgb(0.1, 0.7, 1)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1"), lty = 2) legend("bottomright", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c("blue", rgb(0.1, 0.7, 1)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = "purple", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1"), lty = 2) legend("bottomright", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c("blue", rgb(0.1, 0.7, 1)), lty = c(1, 2), lwd = c(1, 1))
points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = "mediumpurple1", lty = 2)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 1, 0), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 1, 0), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), lty = 2) legend("bottomright", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c(col = rgb(0, 1, 0), col = rgb(0, 1, 0.5)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 1, 0), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 1, 0), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), lty = 2) legend("centerright", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c(col = rgb(0, 1, 0), col = rgb(0, 1, 0.5)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 1, 0), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 1, 0), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), lty = 2) legend("right", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c(col = rgb(0, 1, 0), col = rgb(0, 1, 0.5)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 0.9, 0), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 0.9, 0), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), lty = 2) legend("right", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c(col = rgb(0, 1, 0), col = rgb(0, 1, 0.5)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 0.7, 0), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 0.7, 0), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), lty = 2) legend("right", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c(col = rgb(0, 1, 0), col = rgb(0, 1, 0.5)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,0.7,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,0.7,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend("topright", legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 0.7, 0,0.3), rgb(1, 0, 1,0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",lty=2) legend("topright", legend = c("NPV at max c", "Max NPV"), pch = c(16, 17),        col = c("red","lightcoral"), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), lty = 2) legend("bottomright", legend = c("PPV at max c", "Max PPV"), pch = c(16, 17),        col = c("blue", rgb(0.1,0.7,1)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 0.7, 0), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 0.7, 0), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), lty = 2) legend("right", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c(col = rgb(0, 0.7, 0), col = rgb(0, 1, 0.5)), lty = c(1, 2), lwd = c(1, 1))
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1,0.3),lwd=3) legend("topright", legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 0.7, 0,0.3), rgb(1, 0, 1,0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Sensitivity at Maximum c-statistic and Maximum Sensitivity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col =rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col = rgb(1,0,1), lty = 2)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),xlim=c(50,500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Sensitivity at Maximum c-statistic and Maximum Sensitivity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col =rgb(1,0,1),pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col = rgb(1,0,1), lty = 2)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1),xlim=c(50,500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Sensitivity at Maximum c-statistic and Maximum Sensitivity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(1,0,1), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col =rgb(1,0.5,1),pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col = rgb(1,0.5,1), lty = 2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 2,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,0.7,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,0.7,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7,0.3),lwd=3) legend("topright", legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 0.7, 0,0.3), rgb(0.7, 0, 0.7,0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),xlim=c(50,500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Sensitivity at Maximum c-statistic and Maximum Sensitivity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col =rgb(1,0.5,1),pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col = rgb(1,0.5,1), lty = 2)
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red", ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = "red",lwd=1,lty=1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral",lty=2) legend("topright", legend = c("NPV at max c", "Max NPV"), pch = c(16, 17),        col = c("red","lightcoral"), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", xlim = c(50, 500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "PPV at Maximum c-statistic and Maximum PPV", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = rgb(0.1, 0.7, 1), lty = 2) legend("bottomright", legend = c("PPV at max c", "Max PPV"), pch = c(16, 17),        col = c("blue", rgb(0.1,0.7,1)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 0.7, 0), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Specificity at Maximum c-statistic and Maximum Specificity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0, 0.7, 0), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 9], col = rgb(0, 1, 0.5), lty = 2) legend("right", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c(col = rgb(0, 0.7, 0), col = rgb(0, 1, 0.5)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),xlim=c(50,500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Sensitivity at Maximum c-statistic and Maximum Sensitivity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col =rgb(1,0.5,1),pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col = rgb(1, 0.5, 1), lty = 2) legend("right", legend = c("Spec at max c", "Max Spec"), pch = c(16, 17),        col = c(col = rgb(0, 0.7, 0), col = rgb(0, 1, 0.5)), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),xlim=c(50,500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Sensitivity at Maximum c-statistic and Maximum Sensitivity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col =rgb(1,0.5,1),pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col = rgb(1, 0.5, 1), lty = 2) legend("right", legend = c("Sens at max c", "Max Sens"), pch = c(16, 17),        col = c(col = rgb(0.7,0,0.7), col = rgb(1,0.5,1)), lty = c(1, 2), lwd = c(1, 1))
tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')
tmpBaseDir
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern') png(filename = file.path(tmpBaseDir,'allMetricsAtMaxC.png')) plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=1,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 1,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,0.7,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,0.7,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7,0.3),lwd=3) legend("topright", legend = c("Maximum c-statistic", "NPV at max c","PPV at max c","Specificity at max c","Sensitivity at max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 0.7, 0,0.3), rgb(0.7, 0, 0.7,0.3)), lty = c(1, 2, 2, 1, 1), lwd = c(1, 1, 1, 3, 3)) dev.off()
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
png(filename = file.path(tmpBaseDir, 'sens.png')) plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),xlim=c(50,500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Sensitivity at Maximum c-statistic and Maximum Sensitivity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col =rgb(1,0.5,1),pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col = rgb(1, 0.5, 1), lty = 2) legend("right", legend = c("Sens at max c", "Max Sens"), pch = c(16, 17),        col = c(col = rgb(0.7, 0, 0.7), col = rgb(1, 0.5, 1)), lty = c(1, 2), lwd = c(1, 1)) dev.off()
plot(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),xlim=c(50,500), ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Sensitivity at Maximum c-statistic and Maximum Sensitivity", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col =rgb(1,0.5,1),pch=17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 10], col = rgb(1, 0.5, 1), lty = 2) legend("right", legend = c("Sens at max c", "Max Sens"), pch = c(16, 17),        col = c(col = rgb(0.7, 0, 0.7), col = rgb(1, 0.5, 1)), lty = c(1, 2), lwd = c(1, 1))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
par(xpd=TRUE)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
png(filename = file.path(tmpBaseDir,'allMetricsAtMaxC.png')) plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=1,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 1,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,0.7,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,0.7,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7,0.3),lwd=3) par(xpd=TRUE) legend(350,-0.8, legend = c("Max c-statistic", "NPV at Max c","PPV at Max c","Specificity at Max c","Sensitivity at Max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 0.7, 0,0.3), rgb(0.7, 0, 0.7,0.3)), lty = c(1,1,1, 1, 1), lwd = c(1, 1, 1, 3, 3)) dev.off()
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0.2, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=1,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 1,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,0.7,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,0.7,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7,0.3),lwd=3) par(xpd=TRUE) legend(350,-0.8, legend = c("Max c-statistic", "NPV at Max c","PPV at Max c","Specificity at Max c","Sensitivity at Max c"),pch = c(16,17,17,16,16),        col = c("black", "red", "blue", rgb(0, 0.7, 0,0.3), rgb(0.7, 0, 0.7,0.3)), lty = c(1,1,1, 1, 1), lwd = c(1, 1, 1, 3, 3))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
tmpParOutput = foreach(iRow = 1:tmpN, .combine = 'rbind', .inorder = FALSE, .packages = c('survival', 'Hmisc'), .options.smp = tmpOpts)
library(Hmisc) library(doSNOW) cl <- makeCluster(2, type = "SOCK") registerDoSNOW(cl) tmpN=length(corr.Cuts) tmpMatrix=matrix(nrow=tmpN,ncol=tmpN,data=0)
library(Hmisc) library(doSNOW) cl <- makeCluster(2, type = "SOCK") registerDoSNOW(cl) tmpN=length(corr.Cuts) tmpMatrix=matrix(nrow=tmpN,ncol=tmpN,data=0) # perf. is the matrix of P_k for varying RECIST cutoff points.  If the PD,PR # point is invalid (i.e., PD<PR), then just set P_k = 0.  The up and lo.95 # matrices are the upper and lower 95% confidence intervals on the stat. # That multiplicative factor is 1.95996     corr.bestClass = list(perf = tmpMatrix, up95 = tmpMatrix, lo95 = tmpMatrix, npv = tmpMatrix, ppv = tmpMatrix, spec = tmpMatrix, sens = tmpMatrix) # that first data frame is for doing the STANDARD recist algorithm. # let's also see how this performs using the last continuous change per patient, # and the first change per patient (from baseline to very first followup) corr.lastClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) corr.firstClass=list(perf=tmpMatrix,up95=tmpMatrix,lo95=tmpMatrix) # prepare the log-rank matrices too. logrank.bestClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.firstClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) logrank.lastClass=list(chisq=tmpMatrix,df=tmpMatrix,p=tmpMatrix+1) # get the patients in this collection tmpListPats=names(dataLinRECIST) # make the starter data for the rest of these runs tmpStarterColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols))         )     ) tmpStarterData=dataFullCols[, tmpStarterColsOfInterest] # calculate the classification tasks for the array of cutpoints. # this is the part that can be done in parallel. # the net output of this section of code is the corr.bestClass, # corr.firstClass, and corr.lastClass variables.  That's it.     tmpOpts = list(chunkSize = ceil(tmpN / getDoParWorkers()))
tmpParOutput = foreach(iRow = 1:tmpN, .combine = 'rbind', .inorder = FALSE, .packages = c('survival', 'Hmisc'), .options.smp = tmpOpts)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
tmpParOutput = foreach(iRow = 1:tmpN, .combine = 'rbind', .inorder = FALSE, .packages = c('survival', 'Hmisc'), .options.smp = tmpOpts) %:%     foreach(iCol = 1:tmpN, .combine = 'rbind', .inorder = FALSE, .packages = c('survival', 'Hmisc')) %dopar% { }
perf.metrics = function(corr.Cuts, dataFullCols, dataLinRECIST, classRECIST) {     library(Hmisc)     library(doSNOW)     cl <- makeCluster(2, type = "SOCK")     registerDoSNOW(cl)     tmpN = length(corr.Cuts)     tmpMatrix = matrix(nrow = tmpN, ncol = tmpN, data = 0)     # perf. is the matrix of P_k for varying RECIST cutoff points.  If the PD,PR     # point is invalid (i.e., PD<PR), then just set P_k = 0.  The up and lo.95     # matrices are the upper and lower 95% confidence intervals on the stat.     # That multiplicative factor is 1.95996     corr.bestClass = list(perf = tmpMatrix, up95 = tmpMatrix, lo95 = tmpMatrix, npv = tmpMatrix, ppv = tmpMatrix, spec = tmpMatrix, sens = tmpMatrix)     # that first data frame is for doing the STANDARD recist algorithm.     # let's also see how this performs using the last continuous change per patient,     # and the first change per patient (from baseline to very first followup)     corr.lastClass = list(perf = tmpMatrix, up95 = tmpMatrix, lo95 = tmpMatrix)     corr.firstClass = list(perf = tmpMatrix, up95 = tmpMatrix, lo95 = tmpMatrix)     # prepare the log-rank matrices too.     logrank.bestClass = list(chisq = tmpMatrix, df = tmpMatrix, p = tmpMatrix + 1)     logrank.firstClass = list(chisq = tmpMatrix, df = tmpMatrix, p = tmpMatrix + 1)     logrank.lastClass = list(chisq = tmpMatrix, df = tmpMatrix, p = tmpMatrix + 1)     # get the patients in this collection     tmpListPats = names(dataLinRECIST)     # make the starter data for the rest of these runs     tmpStarterColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols))         )     )     tmpStarterData = dataFullCols[, tmpStarterColsOfInterest]     # calculate the classification tasks for the array of cutpoints.     # this is the part that can be done in parallel.     # the net output of this section of code is the corr.bestClass,     # corr.firstClass, and corr.lastClass variables.  That's it.     tmpOpts = list(chunkSize = ceil(tmpN / getDoParWorkers())) }
tmpParOutput = foreach(iRow = 1:tmpN, .combine = 'rbind', .inorder = FALSE, .packages = c('survival', 'Hmisc'), .options.smp = tmpOpts) %:%     foreach(iCol = 1:tmpN, .combine = 'rbind', .inorder = FALSE, .packages = c('survival', 'Hmisc')) %dopar% { }
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
simTimeChangePair = cbind(do.call(cbind, list(survTimes)), do.call(cbind, list(measChange)))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
simTimeChangePair = cbind(do.call(cbind, list(survTimes)), do.call(cbind, list(measChange)))
survTimes = dataFullCols$SurvTimeDays
length(simDataFullCols$SurvTimeDays)
length(simDataFullCols$Recist2)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
iRow
length(corr.Cuts)
1:41
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
 library(Hmisc)     library(doSNOW)     cl <- makeCluster(2, type = "SOCK")     registerDoSNOW(cl)     tmpN = length(corr.Cuts)     tmpMatrix = matrix(nrow = tmpN, ncol = tmpN, data = 0)
 # perf. is the matrix of P_k for varying RECIST cutoff points.  If the PD,PR     # point is invalid (i.e., PD<PR), then just set P_k = 0.  The up and lo.95     # matrices are the upper and lower 95% confidence intervals on the stat.     # That multiplicative factor is 1.95996     corr.bestClass = list(perf = tmpMatrix, up95 = tmpMatrix, lo95 = tmpMatrix, npv = tmpMatrix, ppv = tmpMatrix, spec = tmpMatrix, sens = tmpMatrix)     # that first data frame is for doing the STANDARD recist algorithm.     # let's also see how this performs using the last continuous change per patient,     # and the first change per patient (from baseline to very first followup)     corr.lastClass = list(perf = tmpMatrix, up95 = tmpMatrix, lo95 = tmpMatrix)     corr.firstClass = list(perf = tmpMatrix, up95 = tmpMatrix, lo95 = tmpMatrix)     # prepare the log-rank matrices too.     logrank.bestClass = list(chisq = tmpMatrix, df = tmpMatrix, p = tmpMatrix + 1)     logrank.firstClass = list(chisq = tmpMatrix, df = tmpMatrix, p = tmpMatrix + 1)     logrank.lastClass = list(chisq = tmpMatrix, df = tmpMatrix, p = tmpMatrix + 1)     # get the patients in this collection     tmpListPats = names(dataLinRECIST)     # make the starter data for the rest of these runs     tmpStarterColsOfInterest = sort(     c(         match("URN", names(dataFullCols)),         match("Status", names(dataFullCols)),         match("SurvTimeDays", names(dataFullCols)),         match("EntryTimeDays", names(dataFullCols)),         match("BaseTimeDays", names(dataFullCols))         )     )     tmpStarterData = dataFullCols[, tmpStarterColsOfInterest]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/generateSimulatedData.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
traceback()
options(show.error.locations = TRUE)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
ppvProgFree=(sum(simPatientsPR[, 1] > 365)+sum(simPatientsSD[, 1] > 365))/(nrow(simPatientsPR)+nrow(simPatientsSD)) # NPVnonresp: PR vs (SD+PD) npvNonResp=(sum(simPatientsSD[, 1] < 365)+sum(simPatientsPD[, 1] < 365))/(nrow(simPatientsSD)+nrow(simPatientsPD)) # Sensprogfree: (PR+SD) vs PD sensProgFree=(sum(simPatientsPR[, 1] > 365)+sum(simPatientsSD[, 1] > 365))/(sum(simPatientsPR[, 1] > 365)+sum(simPatientsSD[,1]>365) + sum(simPatientsPD[, 1] > 365))                 # Specnonresp: PR vs (SD+PD) specNonResp=(sum(simPatientsSD[, 1] < 365)+sum(simPatientsPD[, 1] < 365))/(sum(simPatientsPR[, 1] < 365)+sum(simPatientsSD[,1]<365) + sum(simPatientsPD[, 1] < 365))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
flagPlotMetrics = TRUE if (flagPlotMetrics == TRUE) {     tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')     tmpProjName = 'AustraliaLinearResponse'     tmpDataDir = file.path(tmpBaseDir, tmpProjName)     tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)     source(file.path(tmpScriptDir, 'plotMetrics.R')) } else { }
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=1,lwd=1)
source("C:\\Users\\Justin\\Documents\\_UC intern\\AustraliaLinearResponse\\AustraliaLinearResponse\\analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7,0.3),lwd=3)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         variedPatientNumbersData[, 3][-c(which(is.na(variedPatientNumbersData[, 3])))], col = rgb(1, 0, 0),lty=1,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue",pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 4])))],         variedPatientNumbersData[, 4][-c(which(is.na(variedPatientNumbersData[, 4])))], col = "blue", lty = 1,lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col =rgb(0,0.7,0),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 5])))],         variedPatientNumbersData[, 5][-c(which(is.na(variedPatientNumbersData[, 5])))], col = rgb(0,0.7,0,0.3), lwd = 3) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7),pch=16) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))],         variedPatientNumbersData[, 6][-c(which(is.na(variedPatientNumbersData[, 6])))], col = rgb(0.7,0,0.7,0.3),lwd=3)
variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 6])))]
variedPatientNumbersData[, 1]
-c(which(is.na(variedPatientNumbersData[, 6])))
variedPatientNumbersData[, 6]
-c(which(is.na(variedPatientNumbersData[, 6])))
is.na(variedPatientNumbersData[, 6])
which(is.na(variedPatientNumbersData[, 6]))
list(which(is.na(variedPatientNumbersData[, 6])))
variedPatientNumbersData[, 6]
na.omit(variedPatientNumbersData[, 6])
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1,0,0),pch=17,cex=1.2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][-c(which(is.na(variedPatientNumbersData[, 3])))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1, 0, 0), lty = 1, lwd = 1)
complete.cases(variedPatientNumbersData[, 3])
complete.cases(variedPatientNumbersData[, 6])
which(complete.cases(variedPatientNumbersData[, 6]))
complete.cases(variedPatientNumbersData[, 3])
which(complete.cases(variedPatientNumbersData[, 3]))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1,0,0),pch=17,cex=1.2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1, 0, 0), lty = 1, lwd = 1) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 4]))],         na.omit(variedPatientNumbersData[, 4]), col = "blue", pch = 17, cex = 1.2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1,0,0),pch=17,cex=1.2) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1, 0, 0), lty = 1, lwd = 1) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 4]))],         na.omit(variedPatientNumbersData[, 4]), col = "blue", pch = 17, cex = 1.2) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 4]))],         na.omit(variedPatientNumbersData[, 4]), col = "blue", lty = 1, lwd = 1)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],lwd=1) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1, 0, 0), lty = 1, lwd = 1) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 4]))],         na.omit(variedPatientNumbersData[, 4]), col = "blue", pch = 17) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 4]))],         na.omit(variedPatientNumbersData[, 4]), col = "blue", lty = 2, lwd = 1)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main="Values of Metrics for Different Numbers of Simulated Patients",pch=16) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1,0,0),pch=17) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1, 0, 0)) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 4]))],         na.omit(variedPatientNumbersData[, 4]), col = "blue", pch = 17) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 4]))],         na.omit(variedPatientNumbersData[, 4]), col = "blue")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Values of Metrics for Different Numbers of Simulated Patients", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1, 0, 0), pch = c(16)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1, 0, 0)) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 4]))],         na.omit(variedPatientNumbersData[, 4]), col = "blue", pch = c(16)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 4]))],         na.omit(variedPatientNumbersData[, 4]), col = "blue") points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 5]))],         na.omit(variedPatientNumbersData[, 5]), col = rgb(0, 0.7, 0), pch = c(16)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 5]))],         na.omit(variedPatientNumbersData[, 5]), col = rgb(0, 0.7, 0)) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 7]))],         na.omit(variedPatientNumbersData[, 7]), col = rgb(0.7, 0, 0.7), pch = c(16)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 7]))],         na.omit(variedPatientNumbersData[, 7]), col = rgb(0.7, 0, 0.7)) legend("bottomleft", legend = c("Max c-statistic", "NPV at Max c", "PPV at Max c", "Specificity at Max c", "Sensitivity at Max c"), pch = c(16, 16,16, 16, 16),        col = c("black", "red", "blue", rgb(0, 0.7, 0), rgb(0.7, 0, 0.7)), lty = c(1,1,1, 1, 1))
variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 5]))]
plot(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = "red", xlim = c(50, 500), ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2)
variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))]
variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))]
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2],xlim=c(50,500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Values of Metrics for Different Numbers of Simulated Patients", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1, 0, 0), pch = c(16)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = rgb(1, 0, 0))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
50-15
35*3
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
plot(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 13]))],         na.omit(variedPatientNumbersData[, 13]), col = rgb(0.780392, 0.0823529, 0.421569), xlim = c(50, 500), ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "Spec NonResp at Maximum c-statistic and Maximum Spec NonResp", pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 12]))],         na.omit(variedPatientNumbersData[, 13]), col = rgb(0.780392, 0.0823529, 0.421569), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 17], col = rgb(0.880392, 0.2823529, 0.621569), pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 17], col = rgb(0.880392, 0.2823529, 0.621569), lty = 2)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
simSurvivalTimes simMeasChange
cbind(do.call(cbind, list(simSurvTimes)), do.call(cbind, list(simMeasChange)))
cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange)))
cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange)))[[1]]
cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange)))[, 1]==simSurvivalTimes
cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange)))[, 2]==simSurvivalTimes
cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange)))[, 2]==simMeasChange
cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange)))
a = c(1:10)
a
b=c(11:20)
expand.grid(a,b)
sort(expand.grid(a,b))
expand.grid(a,b)
cbind(a, b)
c = c("a":"j")
a = c(1:5) b = c(11:15) cbind(a, b)
c = c(-5:-1)
d = c(-15:-11)
cbind(c,d)
expand.grid(cbind(a, b), cbind(c,d))
expand.grid(list(cbind(a, b)), cbind(c,d))
expand.grid(list(cbind(a, b)), list(cbind(c,d)))
list(cbind(a, b))
expand.grid(list(cbind(a, b)), list(cbind(c, d)))
cbind(do.call(cbind(a)),do.call(cbind(b)) cbind(do.call(cbind(a)),do.call(cbind(b)))
cbind(do.call(cbind,a),do.call(cbind,b))
cbind(do.call(cbind,list(a)),do.call(cbind,list(b)))
expand.grid(cbind(do.call(cbind, list(a)), do.call(cbind, list(b))), cbind(do.call(cbind, list(c)), do.call(cbind, list(d))))
cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange)))
simSurvivalTimes[500]
cbiMeasTimes[500]
simMeasTimes[500]
simMeasChange[500]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
simPatientsPR = list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] <= (1 + (-0.3))) {         simPatientsPR <- c(simPatientsPR, simTimeChangePair[i,])     } } rm(i) simPatientsPR <- t(matrix(simPatientsPR, nrow = 2))
cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange))) simPatientsPR = list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] <= (1 + (-0.3))) {         simPatientsPR <- c(simPatientsPR, simTimeChangePair[i,])     } } rm(i) simPatientsPR <- t(matrix(simPatientsPR, nrow = 2))
simTimeChangePair=cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange))) simPatientsPR = list() for (i in 1:nrow(simTimeChangePair)) {     if (simTimeChangePair[, 2][[i]] <= (1 + (-0.3))) {         simPatientsPR <- c(simPatientsPR, simTimeChangePair[i,])     } } rm(i) simPatientsPR <- t(matrix(simPatientsPR, nrow = 2))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/cStatComp.R")
nrow(simPatientsPD)
nrow(simPatientsSD)   
nrow(simPatientsPD)
nrow(simPatientsPR)
15+84+1
simPatientsPR
simPatients[,2]
simPatientsPR[,2]
a
a=c(1:2)
b=c(11,12> b=c(11,12))
b=c(11,12)
c=c(21,22)
expand.grid(a,b)
expand.grid(a,b,c)
simPatientsPR[,2]
simPatientsPD[,1]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
simTimeChangePair=cbind(do.call(cbind, list(simSurvivalTimes)), do.call(cbind, list(simMeasChange)))
simTimeChangePair
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/cStatComp.R")
simPatientsPD
simPatientsPR
simPat
simPatientsSD
expand.grid(simPatientsPD,simPatientsPR,simPatientsSD)
14*8
expand.grid(simPatientsPD[,1],simPatientsPR[,1],simPatientsSD[,1])
expand.grid(simPatientsPD[, 1], simPatientsPR[, 1], simPatientsSD[, 1]) expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]) expand.grid(simPatientsPR[, 1], simPatientsPD[, 1]) expand.grid(simPatientsSD[, 1], simPatientsPD[, 1])expand.grid(simPatientsPD[, 1], simPatientsPR[, 1], simPatientsSD[, 1])
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]) expand.grid(simPatientsPR[, 1], simPatientsPD[, 1]) expand.grid(simPatientsSD[, 1], simPatientsPD[, 1])
expand.grid(simPatientsSD[, 1], simPatientsPD[, 1])
length(PD)
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])
expand.grid(simPatientsPR[, 1], simPatientsPD[, 1])
expand.grid(simPatientsSD[, 1], simPatientsPD[, 1])
length(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))
simPatientsSD[,1]
nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))
nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[1,]
simPatientsSD
simPatientsPR
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[1,][1]
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[1,][2]
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[1,1]
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[1,2]
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[4,2]
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])
simPatientsPR
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (         expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[i,1]>expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[i,2]     ) {sum<-sum+1} else { } } print(sum)
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[1, 1]
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (         expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i,1]]>expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i,2]]     ) {sum<-sum+1} else { } } print(sum)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (         expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i,1]]>expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i,2]]     ) {sum<-sum+1} else { } } print(sum)
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[4, 1]]
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[4, 2]]
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (         expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i,1]]>expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i,2]]     ) {print(i)} else { } } print(sum)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)     } else { } } print(sum)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum)
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[1, 1]][1]
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[1, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[1, 1]]
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[1, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[1, 1]]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/cStatComp.R")
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     }  } print(sum)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
rm(i) sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { } } print(sum) rm(i)
sum=0 for (i in nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]))) {     #if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         #print(i)         #sum<-sum+1     #} else { }     sum<-sum+1 } print(sum) rm(i)
sum=0 for (i in c(1:nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])))) {     #if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         #print(i)         #sum<-sum+1     #} else { }     sum<-sum+1 } print(sum) rm(i)
sum=0 for (i in c(1:nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         print(i)         sum<-sum+1     } else { }  } print(sum) rm(i)
sum=0 for (i in c(1:nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         sum<-sum+1     } else { }  } print(sum) rm(i)
sum=0 for (i in c(1:nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         sum<-sum+1     } else { }  } rm(i)
sum=0 for (i in c(1:nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         sum <- sum + 1     } else { }     } rm(i) for (i in c(1:nrow(expand.grid(simPatientsPR[, 1], simPatientsPD[, 1])))) {     if (expand.grid(simPatientsPR[, 1], simPatientsPD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsPD[, 1])[[i, 2]]) {         sum <- sum + 1     } else { }     } rm(i)
expand.grid(simPatientsPR[, 1], simPatientsPD[, 1])
sum=0 for (i in c(1:nrow(expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])))) {     if (expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsSD[, 1])[[i, 2]]) {         sum <- sum + 1     } else { }     } rm(i) for (i in c(1:nrow(expand.grid(simPatientsPR[, 1], simPatientsPD[, 1])))) {     if (expand.grid(simPatientsPR[, 1], simPatientsPD[, 1])[[i, 1]] > expand.grid(simPatientsPR[, 1], simPatientsPD[, 1])[[i, 2]]) {         sum <- sum + 1     } else { }     } rm(i) for (i in c(1:nrow(expand.grid(simPatientsSD[, 1], simPatientsPD[, 1])))) {     if (expand.grid(simPatientsSD[, 1], simPatientsPD[, 1])[[i, 1]] > expand.grid(simPatientsSD[, 1], simPatientsPD[, 1])[[i, 2]]) {         sum <- sum + 1     } else { }     } rm(i)
expand.grid(simPatientsPR[, 1], simPatientsSD[, 1]) expand.grid(simPatientsPR[, 1], simPatientsPD[, 1]) expand.grid(simPatientsSD[, 1], simPatientsPD[, 1])
14+9
((nrow(simPatientsPR) * nrow(simPatientsSD)) + (nrow(simPatientsPR) * nrow(simPatientsPD)) + (nrow(simPatientsSD) * nrow(simPatientsPD)))
sum/((nrow(simPatientsPR)*nrow(simPatientsSD))+(nrow(simPatientsPR)*nrow(simPatientsPD))+(nrow(simPatientsSD)*nrow(simPatientsPD)))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/cStatComp.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeDataEntry.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R", echo = TRUE)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
matrix(c(1:10),nrow = 2)
t(matrix(c(1:10),nrow = 2))
t(matrix(c(1:10),nrow = 2))[[1,1]]
t(matrix(c(1:10),nrow = 2))[,1]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
c.JL = simPatientsSD[[1,1]]
t(matrix(lsit(), nrow = 2))
t(matrix(list(), nrow = 2))
t(matrix(list(), nrow = 2))[[1,1]]
t(matrix(c(1:10),nrow = 2))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
t(matrix(c(1:10),nrow = 2))[[2,1]]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
?Surv
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
c(1:1)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
corr.bestClass$c.JL ==corr.bestClass$perf
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
corr.bestClass%perf==corr.bestClass$c.weighted
corr.bestClass$perf==corr.bestClass$c.weighted
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
?gplot
?ggplot
ggplot(corr.bestClass$perf)
?image
image(1:10,1:10)
image(1:10,1:10,matrix(c(1:100),nrow = 10))
matrix(c(1:100),nrow = 10)
image(1:100,1:100,matrix(c(1:10000),nrow = 100))
image(1:100,1:100,t(matrix(c(1:10000),nrow = 100)))
t(matrix(c(1:10000), nrow = 100))
image(1:10,1:10,t(matrix(c(1:100),nrow = 10)))
image(1:10,1:10,matrix(c(1:100),nrow = 10))
matrix(c(1:100), nrow = 10)
image(1:10,1:10,t(matrix(c(1:100),nrow = 10)))
image(1:20,1:20,t(matrix(c(1:400),nrow = 10)))
image(1:20,1:20,t(matrix(c(1:400),nrow = 20)))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=terrain.colors(60))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(1))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(2))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(900))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(1900))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(10900))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(100))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(10))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(30))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(60))
image(1:30,1:30,t(matrix(c(1:900),nrow = 30)),col=heat.colors(120))
image(1:30,1:30,matrix(c(1:900),nrow = 30),col=heat.colors(120))
image(1:30,1:30,t(corr.bestClass$perf),col=heat.colors(120))
image(1:41,1:41,t(corr.bestClass$perf),col=heat.colors(120))
image(1:41,1:41,t(corr.bestClass$perf),col=heat.colors(41*41))
image(1:41,1:41,corr.bestClass$perf,col=heat.colors(41*41))
image(1:41,1:41,t(corr.bestClass$perf),col=heat.colors(41*41))
image(1:41,1:41,reverse(corr.bestClass$perf),col=heat.colors(41*41))
image(1:41,1:41,rev(corr.bestClass$perf),col=heat.colors(41*41))
image(1:41,1:41,corr.bestClass$perf,col=heat.colors(41*41))
image(1:41,1:41,corr.bestClass$c.weighted,col=heat.colors(41*41))
image(1:41,1:41,corr.bestClass$perf,col=heat.colors(41*41))
corr.bestClass$perf == corr.bestClass$c.weighted
arrayInd(which.max(corr.bestClass$perf), dim(corr.bestClass$perf))[1]
which.max(corr.bestClass$perf)
dim(corr.bestClass)
dim(corr.bestClass$perf)
arrayInd(which.max(corr.bestClass$perf),dim(corr.bestClass$perf))
?which.max
which.max(corr.bestClass$perf)
41*41
max(corr.bestClass$perf)
max(corr.bestClass$perf,na.rm = TRUE)
which(max(corr.bestClass$perf,na.rm = TRUE))
which(max(corr.bestClass$perf,na.rm = TRUE),arrayInd=TRUE)
which(max(corr.bestClass$perf,na.rm = TRUE),arr.ind=TRUE)
which.max(corr.bestClass$perf)
which(corr.bestClass$perf == max(corr.bestClass$perf,na.rm = TRUE))
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf,na.rm = TRUE)),dim(corr.bestClass$perf))
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf,na.rm = TRUE)),dim(corr.bestClass$perf))
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf,na.rm = TRUE)),dim(corr.bestClass$perf))
which(corr.bestClass$perf == max(corr.bestClass$perf,na.rm = TRUE))
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))
corr.Cuts
match(c(-0.3,0.2),corr.Cuts)
match(c(-0.30,0.20),corr.Cuts)
match(c(-0.30,0.20),list(corr.Cuts))
match(c(-1), x)
match(c(-1), corr.Cuts)
match(c(-0.3), corr.Cuts)
match(c(-0.95), corr.Cuts)
match(c(-0.30), corr.Cuts)
match(c(-0.85), corr.Cuts)
match(c(-0.45), corr.Cuts)
match(c(-0.65), corr.Cuts)
match(c(-0.75), corr.Cuts)
match(c(-0.65), corr.Cuts)
c(-1)==corr.Cuts
-1==corr.Cuts
which(-1 == corr.Cuts)
which(c(-1) == corr.Cuts)
which(c(-1,1) == corr.Cuts)
which(-0.3 == corr.Cuts)
which(c(-0.3) == corr.Cuts)
which(c(-0.30) == corr.Cuts)
corr.Cuts
which(corr.Cuts==-0.30)
corr.Cuts[15]
which(corr.Cuts==-0.3)
which(corr.Cuts==(-0.3))
match(c(-0.30), corr.Cuts)
match(c(-0.30), list(corr.Cuts))
which(corr.Cuts != 0, arr.ind = T)
which(corr.Cuts != 0, arr.ind = TRUE)
which(corr.Cuts != -1, arr.ind = TRUE)
match(c(-0.30), corr.Cuts,arr.ind=TRUE)
which.30), corr.Cuts,arr.ind=TRUE)
which(-1== corr.Cuts,arr.ind=TRUE)
which(-0.3== corr.Cuts,arr.ind=TRUE)
length(corr.Cuts)
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[1,]
corr.bestClass$perf[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[1,]]
corr.bestClass$perf[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[1, 1], arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[1,2]]
corr.bestClass[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[1, 1]]
corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[1, 1]]
a = 1corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[1, 1]]
a = 1
rm(a)
list=list()
list=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     list<-c(list,     ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]]-(-0.3))^2)+((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]]-(0.2))^2)     ) }
((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[1, 1]] - (-0.3)) ^ 2) + ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[1, 2]] - (0.2)) ^ 2)
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a<-c(a,     ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]]-(-0.3))^2)+((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]]-(0.2))^2)     ) }
rm(i)
rm(list = )
rm(list )
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a<-list(a,     ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]]-(-0.3))^2)+((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]]-(0.2))^2)     ) } rm(i)
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a<-list(a,     list(((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]]-(-0.3))^2)+((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]]-(0.2))^2))     ) } rm(i)
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a<-list(a,     list(((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]]-(-0.3))^2)+((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]]-(0.2))^2))     ) } rm(i)
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a<-list(a,     list(((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]]-(-0.3))^2)+((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]]-(0.2))^2))     ) } rm(i)
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a<-list(a,     list(((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]]-(-0.3))^2)+((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]]-(0.2))^2))     ) } print(i) rm(i)
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a<-list(a,     list(((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]]-(-0.3))^2)+((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]]-(0.2))^2))     ) } print(i) print(a) rm(i)
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a=list(((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]]-(-0.3))^2)+((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]]-(0.2))^2))     print(a) } print(i) rm(i)
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a =          ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)     print(a) } print(i)
a=list() for (i in nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))) {     a <-list(a,1)         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)     print(a) } print(i)
nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-list(a,1)         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)     print(a) } print(i) rm(i)
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-list(a,list(         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)     ))     print(a) } print(i) rm(i)
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-list(a,list(         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)     )) } print(i) rm(i)
a
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-list(a,         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)     ) } print(i) rm(i)
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)     ) } print(i) rm(i)
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
corr.Cutsp[1,27]
corr.Cutsp[1,27]
corr.Cuts[1,27]
corr.Cuts[1]
corr.Cuts[27]
0.49+0.01
corr.Cuts[2]
0.95-0.3
0.65*0.65
0.4225+0.01
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2))^0.5)     ) } print(i) rm(i)
0.5^0.5
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,list(i,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2))^0.5)     )) } print(i) rm(i)
for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,c(i,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2))^0.5)     )) } print(i) rm(i)
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,c(i,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2))^0.5)     )) } print(i) rm(i)
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,c(i,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2))^0.5)     )) } a<-t(matrix(a,nrow=2)) rm(i)
0.4325^0.5
a
min(a)
min(a[,2])
min(list(a[,2]))
which.min(a[,2])
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2))^0.5)     ) } rm(i)
which.min(a)
corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 1]]
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
corr.Cuts[14]
corr.Cuts[27]
corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a)]]
corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]]
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]
1
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2))^0.5)     ) } print( corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]] ) rm(a) rm(i)corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]]
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2))^0.5)     ) } print( corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]] ) rm(a) rm(i)
a=list() for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {     a <-c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2))^0.5)     ) } print( corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]]     ) print( arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]     ) rm(a) rm(i)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))
1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))
nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf)))
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1], arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1]
### Finding max NPV, PPV, Spec, Sens that are closest in cutoff to the optimal c's cutoffs a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 2]] - (0.2)) ^ 2)) ^ 0.5)     )     }     # Cutoffs that are closest to clinical standard     print( corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]     )     # Their respective indicies     print( arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]     )     # The value of that NPV (make sure it is the max)     print( corr.bestClass$npv[ arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),1], arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),1] ]         )
arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1]
arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
    corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]]
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)) ^ 0.5)     )     }     ## Cutoffs that are closest to clinical standard     corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]]     ## Their respective indicies     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]     # the value of the c-statistic         corr.bestClass$perf[     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 1],     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 2]     ]
    arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),1]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)) ^ 0.5)     )     }     ## Cutoffs that are closest to clinical standard     corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]]     ## Their respective indicies     corr.bestClass$max.stats$max.indPR =500000     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 1]     # the value of the c-statistic         corr.bestClass$perf[     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 1],     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 2]     ]
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)) ^ 0.5)     )     }     ## Cutoffs that are closest to clinical standard     corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]]     ## Their respective indicies     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), ]     # the value of the c-statistic         corr.bestClass$perf[     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 1],     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 2]     ]
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)) ^ 0.5)     )     }     ## Cutoffs that are closest to clinical standard     corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]]     ## Their respective indicies     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), ]     # the value of the c-statistic         corr.bestClass$perf[     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 1],     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 2]     ]     min(a)
    which.min(a)
    a
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)) ^ 0.5)     )     }     ## Cutoffs that are closest to clinical standard     corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),]]     ## Their respective indicies     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), ]     # the value of the c-statistic         corr.bestClass$perf[     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 1],     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 2]     ]
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 1]] - (-0.3)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[i, 2]] - (0.2)) ^ 2)) ^ 0.5)     )     }     ## Cutoffs that are closest to clinical standard     corr.bestClass$max.stats$max.C.PR = corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),1]]     corr.bestClass$max.stats$max.C.PD = corr.Cuts[arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),2]]     ## Their respective indicies     corr.bestClass$max.stats$max.indPR = arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),1]     corr.bestClass$max.stats$max.indPD = arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a),2]     # the value of the c-statistic         corr.bestClass$max.stats$max.C=corr.bestClass$perf[     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 1],     arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))[which.min(a), 2]     ]    
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Cutoffs that are closest to clinical standard     print(     corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]     )
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Cutoffs that are closest to clinical standard     print(     corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]     )     ## Their respective indicies     print(     arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]     )
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Cutoffs that are closest to optimal c's cutoffs     corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]     ## Their respective indicies     arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]     ## The value of that NPV (make sure it is the max)     corr.bestClass$npv[     arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1],     arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 2]     ]
corr.bestClass$max.stats$max.npv = max(corr.bestClass$npv, na.rm = TRUE)
    ## The value of that NPV (make sure it is the max)     corr.bestClass$npv[     arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1],     arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 2]     ]
    corr.bestClass$max.stats$nearest.max.npv=corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]
corr.bestClass$max.stats$nearest.max.npv
arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]
a
whic.min(a)
which.min(a)
a[14]
corr.bestClass$max.stats$nearest.max.npv
corr.bestClass$max.stats$max.indPR
corr.bestClass$max.stats$max.indPD
    a[which.min(a)]
corr.bestClass$max.stats$max.C
max(corr.bestClass$perf,na.rm = TRUE)
corr.bestClass$nearest.comp=list()
    corr.bestClass$nearest.comp$nearest.max.npv=corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]
    corr.bestClass$nearest.comp$nearest.max.npv.dist=a[which.min(a)]
    corr.bestClass$nearest.comp$nearest.max.npv.dist=a[[which.min(a)]]
arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]
corr.bestClass$npv[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1], arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 2]]
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max npv     corr.bestClass$npv[         arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1],     arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.npv=corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.npv.dist=a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]     rm(i)corr.bestClass$npv[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1], arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 2]]
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max npv     corr.bestClass$npv[         arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1],         arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.npv=corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.npv.dist=a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]     rm(i)
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max npv     corr.bestClass$nearest.comp$max.npv=corr.bestClass$npv[         arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1],         arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.npv=corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.npv.dist=a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]     rm(i)
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$ppv == max(corr.bestClass$ppv, na.rm = TRUE)), dim(corr.bestClass$ppv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$ppv == max(corr.bestClass$ppv, na.rm = TRUE)), dim(corr.bestClass$ppv))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$ppv == max(corr.bestClass$ppv, na.rm = TRUE)), dim(corr.bestClass$ppv))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max ppv     corr.bestClass$nearest.comp$max.ppv = corr.bestClass$ppv[         arrayInd(which(corr.bestClass$ppv == max(corr.bestClass$ppv, na.rm = TRUE)), dim(corr.bestClass$ppv))[which.min(a), 1],         arrayInd(which(corr.bestClass$ppv == max(corr.bestClass$ppv, na.rm = TRUE)), dim(corr.bestClass$ppv))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.ppv = corr.Cuts[arrayInd(which(corr.bestClass$ppv == max(corr.bestClass$ppv, na.rm = TRUE)), dim(corr.bestClass$ppv))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.ppv.dist = a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$ppv == max(corr.bestClass$ppv, na.rm = TRUE)), dim(corr.bestClass$ppv))[which.min(a),]     rm(i)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
corr.bestClass$max.stats$max.npv
    corr.bestClass$nearest.comp$nearest.max.npv=list(corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]])
a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max npv     corr.bestClass$nearest.comp$max.npv=corr.bestClass$npv[         arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1],         arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.npv=list(corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]])     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.npv.dist=a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]     rm(i)
    rm(a)
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max npv     corr.bestClass$nearest.comp$max.npv=corr.bestClass$npv[         arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 1],         arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.npv=corr.Cuts[arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.npv.dist=a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$npv == max(corr.bestClass$npv, na.rm = TRUE)), dim(corr.bestClass$npv))[which.min(a),]     rm(i)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeCrossValidate_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
corr.bestClass$max.stats$max.C
corr.bestClass$c.weighted
max(corr.bestClass$c.weighted)
max(corr.bestClass$c.weighted,na.rm = TRUE)
corr.bestClass$max.stats$max.C
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
which.max(corr.bestClass$max.stats$max.C,na.rm=TRUE)
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
arrayInd(which(corr.bestClass$c.weighted == max(corr.bestClass$c.weighted, na.rm = TRUE)), dim(corr.bestClass$c.weighted))
arrayInd(which(corr.bestClass$c.weighted == max(corr.bestClass$c.weighted, na.rm = TRUE)), dim(corr.bestClass$c.weighted)) == arrayInd(which(corr.bestClass$perf == max(corr.bestClass$perf, na.rm = TRUE)), dim(corr.bestClass$perf))
flagNearestMetrics == TRUE if (flagNearestMetrics == TRUE) {     tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')     tmpProjName = 'AustraliaLinearResponse'     tmpDataDir = file.path(tmpBaseDir, tmpProjName)     tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)     source(file.path(tmpScriptDir, 'flagNearestMetrics.R')) } else { }
flagNearestMetrics == TRUE if (flagNearestMetrics == TRUE) {     tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')     tmpProjName = 'AustraliaLinearResponse'     tmpDataDir = file.path(tmpBaseDir, tmpProjName)     tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)     source(file.path(tmpScriptDir, 'flagNearestMetrics.R')) } else { }
flagNearestMetrics = TRUE if (flagNearestMetrics == TRUE) {     tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')     tmpProjName = 'AustraliaLinearResponse'     tmpDataDir = file.path(tmpBaseDir, tmpProjName)     tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)     source(file.path(tmpScriptDir, 'flagNearestMetrics.R')) } else { }
flagNearestMetrics = TRUE if (flagNearestMetrics == TRUE) {     tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')     tmpProjName = 'AustraliaLinearResponse'     tmpDataDir = file.path(tmpBaseDir, tmpProjName)     tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)     source(file.path(tmpScriptDir, 'flagNearestMetrics.R')) } else { }
tmpYlim=64 tmpXlim=64 dev.new(width=7.5,height=5.5) survplot(survfit(Surv(SurvTimeMonths,Status)~1,data=dataFullCols), 	xlab='', 	ylab='Survival Probability', 	time.inc=12, 	conf='none', 	lwd=2, 	n.risk=TRUE, 	y.n.risk=-0.2, 	cex.n.risk=0.75, 	xlim=c(0,tmpXlim)) mtext('Months',side=1,line=0.6,at=c(-3),adj=1,cex=0.8) mtext('Number at risk',side=1,line=2.05,at=c(-3),adj=1,cex=0.65) text(18,0.8, 	labels='n = 78 (75 deaths)\nMedian Survival = 14.9 Months, 95% CI (12.5-17.0)', 	adj=0) ## ---------- some of the new cutpoint plots -------- ## dev.new(width=6,height=5) ## ---------------- std (best) RECIST, C Plot plot(jitter(newCut$stdBestClass,factor=0.25),newCut$SurvTimeMonths, 	pch=1+4*newCut$Status,col=2-newCut$Status, 	cex=2,lwd=2,cex.lab=1.2, 	xaxt='n',yaxt='n',xlim=c(0.7,3.3),ylim=c(0,tmpYlim), 	xlab='Response Class',ylab='Survival (months)') axis(1,at=1:3,label=c('PD\n(+20%)','SD\n','PR\n(-30%)'),tick=FALSE) axis(2,at=seq(0,tmpYlim,12)) box() dev.new(width=6,height=5) ## ------------------ optimized (best) RECIST, C plot plot(jitter(newCut$bestClass,factor=0.25),newCut$SurvTimeMonths, 	pch=1+4*newCut$Status,col=2-newCut$Status, 	cex=2,lwd=2,cex.lab=1.2, 	xaxt='n',yaxt='n',xlim=c(0.7,3.3),ylim=c(0,tmpYlim), 	xlab='Response Class',ylab='Survival (months)') axis(1,at=1:3,label=c('PD\n(+50%)','SD\n','PR\n(-64%)'),tick=FALSE) axis(2,at=seq(0,tmpYlim,12)) box() dev.new(width=7.5,height=5.5) ## ------------------- std (best) RECIST, surv. plot survplot(survfit(Surv(SurvTimeMonths,Status)~stdBestClass,data=newCut), 	xlab='', 	xlim=c(0,tmpXlim),time.inc=12, 	ylab='Survival Probability', 	conf='none', 	label.curves=list(keys='lines',labels=c('PD, n=2','SD, n=50','PR, n=26')), 	lty=c('dotted','dashed','solid'),lwd=2, 	col=c('red','black','goldenrod')) mtext('Months',side=1,line=0.6,at=c(-3),adj=1,cex=0.8) dev.new(width=7.5,height=5.5) ## ------------------- optimized (best) RECIST, surv. plot survplot(survfit(Surv(SurvTimeMonths,Status)~bestClass,data=newCut), 	xlab='', 	xlim=c(0,tmpXlim),time.inc=12, 	ylab='Survival Probability', 	conf='none', 	label.curves=list(keys='lines',labels=c('SD, n=67','PR, n=11')), 	lty=c('dashed','solid'),lwd=2, 	col=c('black','goldenrod')) mtext('Months',side=1,line=0.6,at=c(-3),adj=1,cex=0.8) dev.new(width=6,height=5) ## ---------------- std (first) RECIST, C Plot plot(jitter(newCut$stdFirstClass,factor=0.25),newCut$SurvTimeMonths, 	pch=1+4*newCut$Status,col=2-newCut$Status, 	cex=2,lwd=2,cex.lab=1.2, 	xaxt='n',yaxt='n',xlim=c(0.7,3.3),ylim=c(0,tmpYlim), 	xlab='Response Class',ylab='Survival (months)') axis(1,at=1:3,label=c('PD\n(+20%)','SD\n','PR\n(-30%)'),tick=FALSE) axis(2,at=seq(0,tmpYlim,12)) box() dev.new(width=6,height=5) ## ------------------ optimized (first) RECIST, C plot plot(jitter(newCut$firstClass,factor=0.25),newCut$SurvTimeMonths, 	pch=1+4*newCut$Status,col=2-newCut$Status, 	cex=2,lwd=2,cex.lab=1.2, 	xaxt='n',yaxt='n',xlim=c(0.7,3.3),ylim=c(0,tmpYlim), 	xlab='Response Class',ylab='Survival (months)') axis(1,at=1:3,label=c('PD\n(+50%)','SD\n','PR\n(-64%)'),tick=FALSE) axis(2,at=seq(0,tmpYlim,12)) box()
flagPlotNearestMetrics = TRUE if (flagPlotNearestMetrics == TRUE) {     tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')     tmpProjName = 'AustraliaLinearResponse'     tmpDataDir = file.path(tmpBaseDir, tmpProjName)     tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)     source(file.path(tmpScriptDir, 'plotNearestMetrics.R')) } else { }
lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Values of Metrics for Different Numbers of Simulated Patients", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2])
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], xlim = c(50, 500),     ylim = c(0, 1))
    ylim = c(0, 1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], xlim = c(50, 500),ylim = c(0, 1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], xlim = c(50, 500), ylim = c(0, 1), pch = 16, cex = 1.2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], xlim = c(50, 500), ylim = c(0, 1), pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.7, 0, 0.7), lwd = 1, lty = 1)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], xlim = c(50, 500), ylim = c(0, 1), pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.7, 0, 0.7), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) legend("right", legend = c("NPV at Max c", "Max NPV"), pch = c(16, 17),        col = c("red", "lightcoral"), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Values of Metrics for Different Numbers of Simulated Patients", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], xlim = c(50, 500), ylim = c(0, 1), pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.7, 0, 0.7), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) legend("right", legend = c("NPV at Max c", "Max NPV"), pch = c(16, 17),        col = c("red", "lightcoral"), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = "red", xlim = c(50, 500), ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",         main = "NPV at Maximum c-statistic and Maximum NPV", pch = 16,cex=1.2) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 3]))],         na.omit(variedPatientNumbersData[, 3]), col = "red")
# plotting Max NPV, c-stat, and dist between plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Values of Metrics for Different Numbers of Simulated Patients", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], xlim = c(50, 500), ylim = c(0, 1), pch = 16, cex = 1.2) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.7, 0, 0.7), lwd = 1, lty = 1) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) legend("right", legend = c("NPV at Max c", "Max NPV"), pch = c(16, 17),        col = c("red", "lightcoral"), lty = c(1, 2), lwd = c(1, 1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Values of Metrics for Different Numbers of Simulated Patients", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], pch = 16) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.8, 0, 0.8), lwd = 1, lty = 1) legend("right", legend = c("NPV at Max c", "Max NPV"), pch = c(16, 17),        col = c(, "lightcoral", rgb(0.8, 0, 0.8)), lty = c(1, 2,1), lwd = c(1, 1,1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Maximum c-statistic, Maximum NPV, \nand Distance Between", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], pch = 16) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.8, 0, 0.8), lwd = 1, lty = 1) legend("right", legend = c("Max c-statistic", "Max NPV","Distance"), pch = c(16, 17),        col = c(, "lightcoral", rgb(0.8, 0, 0.8)), lty = c(1, 2,1), lwd = c(1, 1,1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Maximum c-statistic, Maximum NPV, \nand Distance Between", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], pch = 16) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.8, 0, 0.8), lwd = 1, lty = 1) legend("topright", legend = c("Max c-statistic", "Max NPV","Distance"), pch = c(16, 17),        col = c(, "lightcoral", rgb(0.8, 0, 0.8)), lty = c(1, 2,1), lwd = c(1, 1,1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Maximum c-statistic, Maximum NPV, \nand Distance Between", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], pch = 16) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.8, 0, 0.8), lwd = 1, lty = 1) legend("topright", legend = c("Max c-statistic", "Max NPV","Distance"), pch = c(16, 17),        col = c("black", "lightcoral", rgb(0.8, 0, 0.8)), lty = c(1, 2,1), lwd = c(1, 1,1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Maximum c-statistic, Maximum NPV, \nand Distance Between", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], pch = 16, col = rgb(0.8, 0, 0.8)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.8, 0, 0.8), lwd = 1, lty = 1) legend("topright", legend = c("Max c-statistic", "Max NPV","Distance"), pch = c(16, 17),        col = c("black", "lightcoral", rgb(0.8, 0, 0.8)), lty = c(1, 2,1), lwd = c(1, 1,1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Maximum c-statistic, Maximum NPV, \nand Distance Between", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], pch = 16, col = rgb(0.2,0.2,0.2)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.2,0.2,0.2), lwd = 1, lty = 1) legend("topright", legend = c("Max c-statistic", "Max NPV","Distance"), pch = c(16, 17),        col = c("black", "lightcoral", rgb(0.2,0.2,0.2)), lty = c(1, 2,1), lwd = c(1, 1,1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Maximum c-statistic, Maximum NPV, \nand Distance Between", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], pch = 16, col = rgb(0.5,0.5,0.5)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.5,0.5,0.5), lwd = 1, lty =2) legend("topright", legend = c("Max c-statistic", "Max NPV","Distance"), pch = c(16, 17),        col = c("black", "lightcoral", rgb(0.5,0.5,0.5)), lty = c(1, 2,2), lwd = c(1, 1,1))
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Maximum c-statistic, Maximum NPV, \nand Distance Between", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], pch = 16, col = rgb(0.5,0.5,0.5)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 8]))],         na.omit(variedPatientNumbersData[, 8]), col = rgb(0.5,0.5,0.5), lwd = 1, lty =2) legend("topright", legend = c("Max c-statistic", "Max NPV","Distance"), pch = c(16, 17),        col = c("black", "lightcoral", rgb(0.5,0.5,0.5)), lty = c(1, 2,2), lwd = c(1, 1,1))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Maximum c-statistic, Maximum NPV, \nand Distance Between", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 7], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 19], pch = 16, col = rgb(0.5,0.5,0.5)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 19]))],         na.omit(variedPatientNumbersData[, 19]), col = rgb(0.5,0.5,0.5), lwd = 1, lty =2)
plot(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2], xlim = c(50, 500),     ylim = c(0, 1), xlab = "Number of Simulated Patients", ylab = "Value of Metric",     main = "Maximum c-statistic, Maximum PPV, \nand Distance Between", pch = c(16)) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 2]) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightcoral", pch = 17) lines(variedPatientNumbersData[, 1], variedPatientNumbersData[, 8], col = "lightcoral", lty = 2) points(variedPatientNumbersData[, 1], variedPatientNumbersData[, 20], pch = 16, col = rgb(0.1, 0.7, 1)) lines(variedPatientNumbersData[, 1][which(complete.cases(variedPatientNumbersData[, 20]))],         na.omit(variedPatientNumbersData[, 20]), col = rgb(0.1, 0.7, 1), lwd = 1, lty = 2) legend("topright", legend = c("Max c-statistic", "Max PPV", "Distance"), pch = c(16, 17),        col = c("black", "lightcoral", rgb(0.1, 0.7, 1)), lty = c(1, 2, 2), lwd = c(1, 1, 1))
source("C:\\Users\\Justin\\Documents\\_UC intern\\AustraliaLinearResponse\\AustraliaLinearResponse\\analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
0.3    for (i in c(1:nrow(arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max npvNonResp     corr.bestClass$nearest.comp$max.npvNonResp = corr.bestClass$npvNonResp[         arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[which.min(a), 1],         arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.npvNonResp = corr.Cuts[arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.npvNonResp.dist = a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[which.min(a),]     rm(i)     rm(a)
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max npvNonResp     corr.bestClass$nearest.comp$max.npvNonResp = corr.bestClass$npvNonResp[         arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[which.min(a), 1],         arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.npvNonResp = corr.Cuts[arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.npvNonResp.dist = a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$npvNonResp == max(corr.bestClass$npvNonResp, na.rm = TRUE)), dim(corr.bestClass$npvNonResp))[which.min(a),]     rm(i)     rm(a)
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$ppvProgFree == max(corr.bestClass$ppvProgFree, na.rm = TRUE)), dim(corr.bestClass$ppvProgFree))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$ppvProgFree == max(corr.bestClass$ppvProgFree, na.rm = TRUE)), dim(corr.bestClass$ppvProgFree))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$ppvProgFree == max(corr.bestClass$ppvProgFree, na.rm = TRUE)), dim(corr.bestClass$ppvProgFree))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max ppvProgFree     corr.bestClass$nearest.comp$max.ppvProgFree = corr.bestClass$ppvProgFree[         arrayInd(which(corr.bestClass$ppvProgFree == max(corr.bestClass$ppvProgFree, na.rm = TRUE)), dim(corr.bestClass$ppvProgFree))[which.min(a), 1],         arrayInd(which(corr.bestClass$ppvProgFree == max(corr.bestClass$ppvProgFree, na.rm = TRUE)), dim(corr.bestClass$ppvProgFree))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.ppvProgFree = corr.Cuts[arrayInd(which(corr.bestClass$ppvProgFree == max(corr.bestClass$ppvProgFree, na.rm = TRUE)), dim(corr.bestClass$ppvProgFree))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.ppvProgFree.dist = a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$ppvProgFree == max(corr.bestClass$ppvProgFree, na.rm = TRUE)), dim(corr.bestClass$ppvProgFree))[which.min(a),]     rm(i)     rm(a)
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$specNonResp == max(corr.bestClass$specNonResp, na.rm = TRUE)), dim(corr.bestClass$specNonResp))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$specNonResp == max(corr.bestClass$specNonResp, na.rm = TRUE)), dim(corr.bestClass$specNonResp))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$specNonResp == max(corr.bestClass$specNonResp, na.rm = TRUE)), dim(corr.bestClass$specNonResp))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max specNonResp     corr.bestClass$nearest.comp$max.specNonResp = corr.bestClass$specNonResp[         arrayInd(which(corr.bestClass$specNonResp == max(corr.bestClass$specNonResp, na.rm = TRUE)), dim(corr.bestClass$specNonResp))[which.min(a), 1],         arrayInd(which(corr.bestClass$specNonResp == max(corr.bestClass$specNonResp, na.rm = TRUE)), dim(corr.bestClass$specNonResp))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.specNonResp = corr.Cuts[arrayInd(which(corr.bestClass$specNonResp == max(corr.bestClass$specNonResp, na.rm = TRUE)), dim(corr.bestClass$specNonResp))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.specNonResp.dist = a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$specNonResp == max(corr.bestClass$specNonResp, na.rm = TRUE)), dim(corr.bestClass$specNonResp))[which.min(a),]     rm(i)     rm(a)
corr.bestClass$nearest.comp$nearest.max.specNonResp
corr.bestClass$nearest.comp$nearest.max.specNonResp.dist
corr.bestClass$nearest.comp$max.specNonResp
    a = list()     for (i in c(1:nrow(arrayInd(which(corr.bestClass$sensProgFree == max(corr.bestClass$sensProgFree, na.rm = TRUE)), dim(corr.bestClass$sensProgFree))))) {         a <- c(a,         ((((corr.Cuts[arrayInd(which(corr.bestClass$sensProgFree == max(corr.bestClass$sensProgFree, na.rm = TRUE)), dim(corr.bestClass$sensProgFree))[i, 1]] - (corr.bestClass$max.stats$max.C.PR)) ^ 2) +         ((corr.Cuts[arrayInd(which(corr.bestClass$sensProgFree == max(corr.bestClass$sensProgFree, na.rm = TRUE)), dim(corr.bestClass$sensProgFree))[i, 2]] - (corr.bestClass$max.stats$max.C.PD)) ^ 2)) ^ 0.5)     )     }     # Max sensProgFree     corr.bestClass$nearest.comp$max.sensProgFree = corr.bestClass$sensProgFree[         arrayInd(which(corr.bestClass$sensProgFree == max(corr.bestClass$sensProgFree, na.rm = TRUE)), dim(corr.bestClass$sensProgFree))[which.min(a), 1],         arrayInd(which(corr.bestClass$sensProgFree == max(corr.bestClass$sensProgFree, na.rm = TRUE)), dim(corr.bestClass$sensProgFree))[which.min(a), 2]     ]     # Cutoffs that are closest to optimal c's cutoffs     corr.bestClass$nearest.comp$nearest.max.sensProgFree = corr.Cuts[arrayInd(which(corr.bestClass$sensProgFree == max(corr.bestClass$sensProgFree, na.rm = TRUE)), dim(corr.bestClass$sensProgFree))[which.min(a),]]     # Distance to optimal c cutoff     corr.bestClass$nearest.comp$nearest.max.sensProgFree.dist = a[[which.min(a)]]     ## Their respective indicies     #arrayInd(which(corr.bestClass$sensProgFree == max(corr.bestClass$sensProgFree, na.rm = TRUE)), dim(corr.bestClass$sensProgFree))[which.min(a),]     rm(i)     rm(a)
corr.bestClass$nearest.comp$max.sensProgFree
corr.bestClass$nearest.comp$nearest.max.sensProgFree
corr.bestClass$nearest.comp$nearest.max.sensProgFree.dist
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
corr.bestClass$max.stats$max.indPR corr.bestClass$max.stats$max.indPD
corr.bestClass$max.stats$max.indPR corr.bestClass$max.stats$max.indPD
corr.bestClass$perf[corr.bestClass$max.stats$max.indPR, corr.bestClass$max.stats$max.indPD]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
variedPatientNumbersData[,27]
variedPatientNumbersData[,27]/variedPatientNumbersData[,1]
2/125.
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/plotMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
Plot[simMeasChange,simSurvivalTimes]
plot[simMeasChange,simSurvivalTimes]
plot[{> plot[{simMeasChange,simSurvivalTimes}]simMeasChange,simSurvivalTimes}]
plot[{simMeasChange,simSurvivalTimes}]
plot(simMeasChange,simSurvivalTimes)
plot(simSurvivalTimes,simMeasChange)
plot(simSurvivalTimes,simMeasChange,ylim->cl(0,1))
plot(simSurvivalTimes,simMeasChange,ylim->c(0,1))
plot(simSurvivalTimes,simMeasChange,ylim=c(0,1))
plot(simSurvivalTimes,simMeasChange,ylim=c(0,2))
plot(simSurvivalTimes,simMeasChange,ylim=c(0,2))
dataFullColsAnonymized["SurvTimeDays"]
dataFullColsAnonymized["SurvTimeDays"][,1]
dataFullColsAnonymized["RecistChangeN"][,1]
plot(dataFullColsAnonymized["SurvTimeDays"][, 1], dataFullColsAnonymized["RecistChangeN"][, 1])
plot(dataFullColsAnonymized["SurvTimeDays"][, 1], dataFullColsAnonymized["RecistChangeN"][, 1])
plot(dataFullColsAnonymized["RecistChangeN"][, 1], dataFullColsAnonymized["SurvTimeDays"][, 1])
plot(dataFullColsAnonymized["SurvTimeDays"][, 1], dataFullColsAnonymized["RecistChangeN"][, 1],ylim=c(-1,1))
plot(dataFullColsAnonymized["SurvTimeDays"][, 1], dataFullColsAnonymized["RecistChangeN"][, 1])
plot(dataFullColsAnonymized["SurvTimeDays"][, 1], dataFullColsAnonymized["RecistChangeN"][, 1])
plot(dataFullColsAnonymized["SurvTimeDays"][, 1], dataFullColsAnonymized["RecistChangeN"][, 1],ylim=c(-1,1))
plot(dataFullColsAnonymized["SurvTimeDays"][, 1], dataFullColsAnonymized["RecistChangeN"][, 1], ylim = c(min(dataFullColsAnonymized["RecistChangeN"][, 1]), max(dataFullColsAnonymized["RecistChangeN"][, 1])))
plot(dataFullColsAnonymized["SurvTimeDays"][, 1], dataFullColsAnonymized["RecistChangeN"][, 1], ylim = c(min(dataFullColsAnonymized["RecistChangeN"][, 1]), max(dataFullColsAnonymized["RecistChangeN"][, 1])))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/funcPerfMetrics.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
classrecist, dataFullColsAnonymized,dataLinRECIST,dataVolRECISTsource("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
    source(file.path(tmpScriptDir, '_importData_Patient.R'))
# Analyze real patietn data. #JL 2017 ###((Run 'importData_Simulation.R', followed by 'generateSimulatedData.R'### library(Hmisc) # vary the RECIST cutoffs and see what happens. # set the file names tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern') tmpProjName = 'AustraliaLinearResponse' tmpDataDir = file.path(tmpBaseDir, tmpProjName) tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName) # Flags indicating how to optimize flagMidPercentile = FALSE midPercentile = 80 flagCloseToClinical = FALSE flagCloseToClinicalNo0 = FALSE source(file.path(tmpScriptDir, 'createThresholds.R'))     source(file.path(tmpScriptDir, 'importData_Simulation.R'))     tmpBaseDir = file.path('C:', 'Users', 'Justin', 'Documents', '_UC intern')     tmpProjName = 'AustraliaLinearResponse'     tmpDataDir = file.path(tmpBaseDir, tmpProjName)     tmpScriptDir = file.path(tmpBaseDir, tmpProjName, tmpProjName)     source(file.path(tmpScriptDir, '_importData_Patient.R'))
library(Hmisc)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/importData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_importData_Patient.R")
names(dataLinRECIST)
match("URN", names(dataFullCols))
match("URN", names(dataFullColsAnonymized))
c(         match("URN", names(dataFullColsAnonymized)),         match("Status", names(dataFullColsAnonymized)),         match("SurvTimeDays", names(dataFullColsAnonymized)),         match("EntryTimeDays", names(dataFullColsAnonymized)),         match("BaseTimeDays", names(dataFullColsAnonymized))         )
tmpStarterData
dataFullColsAnonymized[, tmpStarterColsOfInterest]
tmpStarterData = dataFullColsAnonymized[, tmpStarterColsOfInterest]
    # make the starter data for the rest of these runs     tmpStarterColsOfInterest = sort(     c(         match("URN", names(dataFullColsAnonymized)),         match("Status", names(dataFullColsAnonymized)),         match("SurvTimeDays", names(dataFullColsAnonymized)),         match("EntryTimeDays", names(dataFullColsAnonymized)),         match("BaseTimeDays", names(dataFullColsAnonymized))         )     )     tmpStarterData = dataFullColsAnonymized[, tmpStarterColsOfInterest]
    tmpOpts = list(chunkSize = ceil(tmpN / getDoParWorkers()))
dataFullColsAnonymized$SurvTimeDays
dataFullColsAnonymized[SurvTimeDays]
dataFullColsAnonymized["SurvTimeDays"]
dataFullColsAnonymized["RecistChangeN"]
measChange = dataFullColsAnonymized$RecistChangeN
simTimeChangePair = cbind(do.call(cbind, list(survTimes)), do.call(cbind, list(measChange)))
tmpCutPR = corr.Cuts[iRow]	# row tied to PR         tmpCutPD = corr.Cuts[iCol] # column tied to PD         survTimes = dataFullColsAnonymized$SurvTimeDays         measChange = dataFullColsAnonymized$RecistChangeN
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/createThresholds.R")
# Flags indicating how to optimize flagMidPercentile = FALSE midPercentile = 80 flagCloseToClinical = FALSE flagCloseToClinicalNo0 = FALSE source(file.path(tmpScriptDir, 'createThresholds.R'))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_importData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/createThresholds.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$max.stats
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
plot(dataFullColsAnonymize["RecistChangeN"],dataFullColsAnonymized["SurvTimeDays"])
plot(dataFullColsAnonymized["RecistChangeN"],dataFullColsAnonymized["SurvTimeDays"])
plot(dataFullColsAnonymized["RecistChangeN"][,1],dataFullColsAnonymized["SurvTimeDays"][,1])
plot(dataFullColsAnonymized["SurvTimeDays"][, 1], dataFullColsAnonymized["RecistChangeN"][, 1])
dataFullColsAnonymized["SurvTimeDays"][, 1]
dataFullColsAnonymized$SurvTimeDays
dataFullColsAnonymized[SurvTimeDays]
dataFullColsAnonymized["SurvTimeDays"]
dataFullColsAnonymized$RecistChangeN
dataLinRECIST[,"changeMin"]
dataLinRECIST[,,"changeMin"]
dataLinRECIST["changeMin"]
dataLinRECIST
dataLinRECIST$$changeMin
dataLinRECIST$changeMin
sapply(dataLinRECIST, `[`, "changeMin")
sapply(dataLinRECIST, `[[`, "changeMin")
sapply(dataLinRECIST, `[[`, "changeMin")[,2]
sapply(dataLinRECIST, `[[`, "changeMin")[all,2]
sapply(dataLinRECIST, `[[`, "changeMin")
column(sapply(dataLinRECIST, `[[`, "changeMin"))
sapply(dataLinRECIST, `[[`, "changeMin")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$perf==corr.bestClass$c.weighted
dataFullColsAnonymized$minRecistChange =1
dataFullColsAnonymized$minRecistChange =c(1:nrow(dataFullColsAnonymized)))
dataFullColsAnonymized$minRecistChange =c(1:nrow(dataFullColsAnonymized)))
dataFullColsAnonymized$minRecistChange =c(1:nrow(dataFullColsAnonymized))
dataFullColsAnonymized$minRecistChange = sapply(dataLinRECIST, `[[`, "changeMin")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$perf==corr.bestClass$c.weighted
Surv(tmpPatClass$SurvTimeDays, tmpPatClass$Status)
        measChange = dataFullColsAnonymized$RecistChangeN
measChange
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$perf==corr.bestClass$c.weighted
dataFullColsAnonymized$Recist2
dataFullColsAnonymized$Recist2 - dataFullColsAnonymized$Recist1
dataFullColsAnonymized$Recist1
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$perf==corr.bestClass$c.weighted
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
max(corr.bestClass$c.weighted,na.rm = TRUE)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
tmpPatClass$bestClass
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")tmpPatClass$bestClass[tmpPatClass$bestClass[, 2] == 1,]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R", echo = TRUE)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
dataLinRECIST[[as.character(iPat)]]
tmpListPats
names(dataLinRECIST)
dataLinRECIST[[as.character("10127")]]
dataLinRECIST[[as.character("10127")]]$classRECIST
dataLinRECIST[[as.character("10127")]]$classRECIST
dataLinRECIST[[as.character("10127")]]["classRECIST"]
dataLinRECIST[[as.character("10127")]]
length(tmpPatRecord$changeBaseline)
dataLinRECIST[[as.character("10127")]]
dataLinRECIST[[as.character("10127")]]$chagneBaseLine
dataLinRECIST[[as.character("10127")]]
dataLinRECIST[[as.character("10127")]][1]
dataLinRECIST[[as.character("10127")]][2]
?factor
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
rm(classRECIST, envir = as.environment(".GlobalEnv"))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
?factor
factor(c(1:10),levels = c('a','b','c'),labes=c(1,2,3))
factor(c(1:10),levels = c('a','b','c'),labels=c(1,2,3))
factor(c(1:10),levels = c('PD','SD','PR'),labels=c(1,2,3))
sort.list(c(1:10))
as.character(c(1:10))
factor(c(1:10))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
matrix(c(1:20),nrow = 4)
matrix(c(1:20),nrow = 4)[1,]
matrix(c(1:20), nrow = 4)[matrix(c(1:20), nrow = 4)[,2]==5,]
matrix(c(1:20), nrow = 4)[matrix(c(1:20), nrow = 4)[,2]==5,c(1:4)]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
list(matrix(c(1:20), nrow = 4))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$perf==corr.bestClass$c.weighted
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$c.weighted==corr.bestClass$perf
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
dataFullColsAnonymized$Status
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$perf-corr.bestClass$c.weighted
typeof(corr.bestClass$perf)
typeof(corr.bestClass$c.weighted)
typeof(corr.bestClass$c.weighted[3,22])
corr.bestClass$c.weighted[3,22]
sprintf("%10.20f",corr.bestClass$c.weighted[3,22])
sprintf("%10.20f",corr.bestClass$perf[3,22])
corr.bestClass$perf[1:21,21:41] - corr.bestClass$c.weighted[1:21,21:41]
diffBetwennPerf = corr.bestClass$perf[1:21,21:41] - corr.bestClass$c.weighted[1:21,21:41]
require(plot3D)
install.packages("plot3D", lib="C:/Users/Justin/Documents/R/win-library/3.3")
require(plot3D)
persp3D(z = diffBetwennPerf,theta = 120)
persp3D(z = diffBetwennPerf,theta =60)
diffBetwennPerf
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$perf-corr.bestClass$c.weighted
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$perf-corr.bestClass$c.weighted
persp3D(z = diffBetwennPerf,theta =60)
diffBetwennPerf = corr.bestClass$perf[1:21,21:41] - corr.bestClass$c.weighted[1:21,21:41]
persp3D(z = diffBetwennPerf,theta =60)
diffBetwennPerf
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
corr.bestClass$perf==corr.bestClass$c.weighted
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
corr.bestClass$perf-corr.bestClass$c.weighted
heatmap(corr.bestClass$perf)
heatmap(corr.bestClass$c.weighted)
plot.matrix(corr.bestClass$perf)
myImagePlot <- function(x, ...) {     min <- min(x)     max <- max(x)     yLabels <- rownames(x)     xLabels <- colnames(x)     title <- c()     # check for additional function arguments     if (length(list(...))) {         Lst <- list(...)         if (!is.null(Lst$zlim)) {             min <- Lst$zlim[1]             max <- Lst$zlim[2]         }         if (!is.null(Lst$yLabels)) {             yLabels <- c(Lst$yLabels)         }         if (!is.null(Lst$xLabels)) {             xLabels <- c(Lst$xLabels)         }         if (!is.null(Lst$title)) {             title <- Lst$title         }     }     # check for null values     if (is.null(xLabels)) {         xLabels <- c(1:ncol(x))     }     if (is.null(yLabels)) {         yLabels <- c(1:nrow(x))     }     layout(matrix(data = c(1, 2), nrow = 1, ncol = 2), widths = c(4, 1), heights = c(1, 1))     # Red and green range from 0 to 1 while Blue ranges from 1 to 0     ColorRamp <- rgb(seq(0, 1, length = 256), # Red                    seq(0, 1, length = 256), # Green                    seq(1, 0, length = 256)) # Blue     ColorLevels <- seq(min, max, length = length(ColorRamp))     # Reverse Y axis     reverse <- nrow(x):1     yLabels <- yLabels[reverse]     x <- x[reverse,]     # Data Map     par(mar = c(3, 5, 2.5, 2))     image(1:length(xLabels), 1:length(yLabels), t(x), col = ColorRamp, xlab = "",  ylab = "", axes = FALSE, zlim = c(min, max))     if (!is.null(title)) {         title(main = title)     }     axis(BELOW <- 1, at = 1:length(xLabels), labels = xLabels, cex.axis = 0.7)     axis(LEFT <- 2, at = 1:length(yLabels), labels = yLabels, las = HORIZONTAL <- 1,  cex.axis = 0.7)     # Color Scale     par(mar = c(3, 2.5, 2.5, 2))     image(1, ColorLevels,       matrix(data = ColorLevels, ncol = length(ColorLevels), nrow = 1),       col = ColorRamp,       xlab = "", ylab = "",       xaxt = "n")     layout(1) }
myImagePlot(corr.bestClass$perf)
myImagePlot(corr.bestClass$perf,na.rm=TRUE)
myImagePlot(na.omit(corr.bestClass$perf))
myImagePlot(na.omit(corr.bestClass$c.weighted))
myImagePlot(na.omit(corr.bestClass$perf))
myImagePlot(na.omit(corr.bestClass$perf))
myImagePlot(na.omit(corr.bestClass$perf))
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
myImagePlot(na.omit(corr.bestClass$perf))
myImagePlot <- function(x, ...) {     min <- min(x)     max <- max(x)     yLabels <- rownames(x)     xLabels <- colnames(x)     title <- c()     # check for additional function arguments     if (length(list(...))) {         Lst <- list(...)         if (!is.null(Lst$zlim)) {             min <- Lst$zlim[1]             max <- Lst$zlim[2]         }         if (!is.null(Lst$yLabels)) {             yLabels <- c(Lst$yLabels)         }         if (!is.null(Lst$xLabels)) {             xLabels <- c(Lst$xLabels)         }         if (!is.null(Lst$title)) {             title <- Lst$title         }     }     # check for null values     if (is.null(xLabels)) {         xLabels <- c(1:ncol(x))     }     if (is.null(yLabels)) {         yLabels <- c(1:nrow(x))     }     layout(matrix(data = c(1, 2), nrow = 1, ncol = 2), widths = c(4, 1), heights = c(1, 1))     # Red and green range from 0 to 1 while Blue ranges from 1 to 0     ColorRamp <- rgb(seq(0, 1, length = 256), # Red                    seq(0, 1, length = 256), # Green                    seq(1, 0, length = 256)) # Blue     ColorLevels <- seq(min, max, length = length(ColorRamp))     # Reverse Y axis     reverse <- nrow(x):1     yLabels <- yLabels[reverse]     x <- x[reverse,]     # Data Map     par(mar = c(3, 5, 2.5, 2))     image(1:length(xLabels), 1:length(yLabels), t(x), col = ColorRamp, xlab = "",  ylab = "", axes = FALSE, zlim = c(min, max))     if (!is.null(title)) {         title(main = title)     }     axis(BELOW <- 1, at = 1:length(xLabels), labels = xLabels, cex.axis = 0.7)     axis(LEFT <- 2, at = 1:length(yLabels), labels = yLabels, las = HORIZONTAL <- 1,  cex.axis = 0.7)     # Color Scale     par(mar = c(3, 2.5, 2.5, 2))     image(1, ColorLevels,       matrix(data = ColorLevels, ncol = length(ColorLevels), nrow = 1),       col = ColorRamp,       xlab = "", ylab = "",       xaxt = "n")     layout(1) }
myImagePlot(na.omit(corr.bestClass$perf))
require(akima);
require(rgl)
persp3D(corr.bestClass$perf)
persp3D(z=corr.bestClass$perf)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted)
persp(z=corr.bestClass$perf-corr.bestClass$c.weighted)
persp(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta=60)
persp(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta=60,phi=60)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta=60,phi=60)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta=60,phi=60)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta=0,phi=60)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta=0,phi=80)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta = 90)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta = 90,phi = 60)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta = 100,phi = 60)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta = 90,phi = 90)
persp3D(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta = 90,phi = 80)
persp(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta = 90,phi = 80)
persp3D(z=corr.bestClass$perf,theta = 90,phi = 80)
persp3D(z=corr.bestClass$perf,theta = 90,phi = 90)
persp(z=corr.bestClass$perf-corr.bestClass$c.weighted,theta = 90,phi = 80)
persp(z=corr.bestClass$perf-corr.bestClass$c.weighted)
persp(z=corr.bestClass$perf)
persp(z=corr.bestClass$perf[[21:41]])
persp(z=corr.bestClass$perf[21:41])
persp3D(z = corr.bestClass$perf[1:21, 21:41], theta = 60)
persp3D(z = corr.bestClass$perf[1:21, 20:41], theta = 60)
persp3D(z = corr.bestClass$perf[1:22, 20:42], theta = 60)
persp3D(z = corr.bestClass$perf[1:22, 20:41], theta = 60)
persp3D(z = corr.bestClass$perf[1:21, 20:41], theta = 60)
persp3D(z = corr.bestClass$perf[1:21, 21:41], theta = 60)
persp3D(z = corr.bestClass$perf[1:21, 21:41] - corr.bestClass$c.weighted[1:21, 21:41], theta = 60)
persp3D(z = corr.bestClass$perf[1:21, 21:41] - corr.bestClass$c.weighted[1:21, 21:41], theta = 0)
persp3D(z = corr.bestClass$perf[1:21, 21:41] - corr.bestClass$c.weighted[1:21, 21:41], theta = 120)
max(corr.bestClass$c.weighted,na.rm = TRUE)
hist(dataFullColsAnonymized$SurvTimeDays)
?hist
hist(dataFullColsAnonymized$SurvTimeDays,breaks=15)
hist(dataFullColsAnonymized$SurvTimeDays,breaks=25)
365-50
315-50
seq(start=265,step=50)
?seq
seq(from=265,to=465,step=50)
seq(from=265,to=465,by=50)
seq(from=165,to=565,by=50)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
tThresh
tThresh
toString(tThresh)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/analyzeData_Simulation.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
?var
paste(1,2)
paste(variedtThreshData, tThreshString, sep = '$')
paste('variedtThreshData', tThreshString, sep = '$')
paste('variedtThreshData', tThreshString, sep = '$')=1
assign(paste('variedtThreshData', tThreshString, sep = '$'),1)
do.call("<-", list(paste('variedtThreshData', tThreshString, sep = '$'), 1))
as.name(paste('variedtThreshData', tThreshString, sep = '$'))
as.expression(paste('variedtThreshData', tThreshString, sep = '$'))
paste("variedtThreshData", tThreshString, sep = '$')
variedtThreshData$265
as.numeric("variedtThreshData$265")
parse("variedtThreshData$265")
    ?sub
?sub
rm(tThreshString)
variedtThreshData[[tThresh]] <- 1
variedtThreshData[[toString(tThresh)]] <- 1
rm(`variedtThreshData$265`, envir = as.environment(".GlobalEnv"))
rm(`variedtThreshData$265`, envir = as.environment(".GlobalEnv"))
variedtThreshData[[toString(tThresh)]] <- 1
rm(variedtThreshData, envir = as.environment(".GlobalEnv"))
variedtThreshData[[toString(tThresh)]] <- 1
toString(tThresh)
variedtThreshData=list()
variedtThreshData[["265"]]=1
variedtThreshData[[265]]=1
variedtThreshData[['265']]=1
rm(variedtThreshData, envir = as.environment(".GlobalEnv"))
variedtThreshData=list()
variedtThreshData[['265']]=1
variedtThreshData[[toString(tThresh)]][["perf"]]
variedtThreshData[[toString(tThresh)]]["perf"]
variedtThreshData[[toString(tThresh)]]["perf"]<-1
variedtThreshData[[toString(tThresh)]][["perf"]]<-1
rm(variedtThreshData, envir = as.environment(".GlobalEnv"))
variedtThreshData=list()variedtThreshData[[toString(tThresh)]][["perf"]]<-1
variedtThreshData=list() v+ variedtThreshData[[toString(tThresh)]][["perf"]]<-1ariedtThreshData[[toString(tThresh)]][["perf"]]<-1
variedtThreshData=list() + variedtThreshData[[toString(tThresh)]][["perf"]]<-1ariedtThreshData[[toString(tThresh)]][["perf"]]<-1variedtThreshData[[toString(tThresh)]][["perf"]]<-1ariedtThreshData[[toString(tThresh)]][["perf"]]<-1
variedtThreshData=list()variedtThreshData[[toString(tThresh)]][["perf"]]<-1variedtThreshData=list()
variedtThreshData=list()
    variedtThreshData[[toString(tThresh)]][["perf"]] <- corr.bestClass$perf
variedtThreshData=list()
    variedtThreshData
    variedtThreshData[[toString(tThresh)]] <- corr.bestClass$perf
corr.bestClass
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
tThreshArray = seq(from = 165, to = 265, by = 50)
tThreshArray
tThreshArray = seq(from = 165, to = 165, by = 50)
tThreshArray
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
variedtThreshData$165$perf==variedtThreshData$415$perf
variedtThreshData$'165'$perf==variedtThreshData$415$perf
variedtThreshData$'165'$perf==variedtThreshData$'415'$perf
identical(variedtThreshData$`165`$perf, variedtThreshData$`465`$perf)
identical(variedtThreshData$`165`$perf, variedtThreshData$`265`$perf)
identical(variedtThreshData$`165`$perf, variedtThreshData$`565`$perf)
identical(variedtThreshData$`165`$c.weighted, variedtThreshData$`565`$perf)
identical(variedtThreshData$`165`$c.weighted, variedtThreshData$`565`$c.weighted)
identical(variedtThreshData$`165`$c.weighted, variedtThreshData$`315`$c.weighted)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
variedtThreshData[toString(tThresh)][["npv"]] <- corr.bestClass$npv
tThresh=10
variedtThreshData[toString(tThresh)][["npv"]] <- corr.bestClass$npv
rm(tThreshArray)
rm(tThresh)
variedtThreshData$`10`
variedtThreshData$`165`$spec
variedtThreshData$`165`$spec[15,26]
variedtThreshData$`165`$spec[15,27]
lapply(variedtThreshData, `[[`, "spec")
lappy(lapply(variedtThreshData, `[[`, "spec"),'[[',15)
lapply(lapply(variedtThreshData, `[[`, "spec"),'[[',15)
lapply(lapply(variedtThreshData, `[[`, "spec"),'[[',15,27)
lapply(lapply(variedtThreshData, `[[`, "spec"),'[[',15,27)
lapply(lapply(variedtThreshData, `[[`, "spec"),'[[',15,27)[[1]]
variedtThreshData$`165`$spec[15, 27] == lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)[[1]]
variedtThreshData$`175`$spec[15, 27] == lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)[[2]]
variedtThreshData$`175`$spec[15, 27]
lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)[[2]]
lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)[[3]]
variedtThreshData$`185`$spec[15, 27]
list(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27))
lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)[,2]
lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)
lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)[[1]]
for (i in c(1:17)) { lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)[[i]] }
temp=list() for (i in c(1:17)) { appendTo(temp,lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)[[i]] )}
temp=list() for (i in c(1:17)) { append(temp,lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27)[[i]] )}
temp
lapply(lapply(variedtThreshData, `[[`, "spec"), '[', 15)
lapply(lapply(variedtThreshData, `[[`, "spec"), '[,', 15)
lapply(lapply(variedtThreshData, `[[`, "spec"), '[[,', 15)
lapply(lapply(variedtThreshData, `[[`, "spec"), '[', 15,27)
variedtThreshData$`165`$spec[15,27]
variedtThreshData$`175`$spec[15,27]
variedtThreshData$`185`$spec[15,27]
variedtThreshData$`95`$spec[15,27]
variedtThreshData$`195`$spec[15,27]
variedtThreshData$`205`$spec[15,27]
variedtThreshData$`215`$spec[15,27]
variedtThreshData$`225`$spec[15,27]
variedtThreshData$`255`$spec[15,27]
(variedtThreshData$`255`$spec)[15,27]
variedtThreshData$`255`$spec
variedtThreshData$`190`$spec
variedtThreshData$`190`$spec[15,27]
variedtThreshData$`165`$spec[15,27]
variedtThreshData$`215`$spec[15,27]
variedtThreshData$`240`$spec[15,27]
variedtThreshData$`265`$spec[15,27]
variedtThreshData$`365`$spec[15,27]
variedtThreshData$`465`$spec[15,27]
variedtThreshData$`565`$spec[15,27]
variedtThreshData$`490`$spec[15,27]
variedtThreshData$`390`$spec[15,27]
variedtThreshData$`290`$spec[15,27]
variedtThreshData$`310`$spec[15,27]
variedtThreshData$`315`$spec[15,27]
variedtThreshData$`415`$spec[15,27]
variedtThreshData$`515`$spec[15,27]
variedtThreshData$`540`$spec[15,27]
variedtThreshData$`440`$spec[15,27]
variedtThreshData$`340`$spec[15,27]
variedtThreshData$`255`$spec[15,27]
lapply(lapply(variedtThreshData, `[[`, "spec"), '[', 15,27)
lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15,27)
t(lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27), lapply(lapply(variedtThreshData, `[[`, "spec"), '[', 15, 27))
t(lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27), lapply(lapply(variedtThreshData, `[[`, "spec"), '[', 15, 27)))
list(lapply(lapply(variedtThreshData, `[[`, "spec"), '[', 15, 27), lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27))
lapply(lapply(variedtThreshData, `[[`, "spec"), '[', 15, 27)
lapply(lapply(variedtThreshData, `[[`, "spec","sens"), '[', 15, 27)
lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27)
1-lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27)
lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27)
c(lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27))
c(lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27))[[1]]
c(lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27))[[2]]
1 - c(lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27))[[2]]
1 - c(lapply(lapply(variedtThreshData, `[[`, "sens"), '[', 15, 27))
lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27)
lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27),'[[')
lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27),'[[',2)
lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27),'[[',1)
lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27),'[[',1)
t(lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1), lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1))
for (i in c(1:17)) { print(c(lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]], lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]])) }
for (i in c(1:17)) { print(c(lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]], lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]])) }
for (i in c(1:17)) { print(c(lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]], lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]])) } for (i in c(1:17)) { print(c(lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]], lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]])) }
for (i in c(1:17)) { append(temp, (c(lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]], lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]])))}
temp
for (i in c(1:17)) { t( (c(lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]], lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]])))}
temp=for (i in c(1:17)) { t( (c(lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]], lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]])))}
temp=data.frame()
temp
temp=data.frame)()
temp=data.frame()
temp[[1,1]]=10
temp = data.frame(nrow = length(tThreshArray), ncol = 2)
tThreshArray = seq(from = 165, to = 565, by = 25)
variedtThreshData=list()
temp = data.frame(nrow = length(tThreshArray), ncol = 2)
temp[[1,1]]=10
temp = data.frame(length(tThreshArray), 2)
temp[[1,1]]=10> temp[[1,1]]=10
temp[[1,1]]=10
temp = matrix(nrow = length(tThreshArray), ncol = 2)
temp[[1,1]]=10
temp = matrix(nrow = length(tThreshArray), ncol = 2)
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]],     temp[[i,2]]=lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]] }
temp[[1, 1]] = lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[1]]
temp[[1, 1]] = lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)
lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)
lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     c(         lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]],         lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]]     ) }
lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)
lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27)
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     c(         lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]],         lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]]     ) }
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]],     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]] }
    temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]]
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]] }
na.omot(temp)
na.omit(temp)
print(na.omit(temp))
na.omit(temp)
temp<-na.omit(temp)
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]] }
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]] } temp<-na.omit(temp)
plot(temp[,1],temp[,2])
plot(temp[,1],1-temp[,2])
plot(1-temp[,1],temp[,2])
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 17, 27), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 17, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(1-temp[,1],temp[,2])
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sens"), '[[', 15, 27), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "spec"), '[[', 15, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(1-temp[,1],temp[,2])
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', 15, 27), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', 15, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(1-temp[,1],temp[,2])
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', 15, 27), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', 15, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(1-temp[,1],temp[,2],pch=20)
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', 15, 27), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', 15, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1-sensitivity",ylab="specificity")
plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1-sensitivity",ylab="specificity",title="hi")
plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1-sensitivity",ylab="specificity",main="hi")
plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1-sensitivity",ylab="specificity",main="Specificity vs 1-Sensitivity for various tTHresh")
plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1 - Sensitivity",ylab="Specificity",main="Specificity vs 1-Sensitivity for various tTHresh")
plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1 - SensitivityProgFree",ylab="SpecificityNonResp",main="SpecificityNonResp vs 1-SensitivityProgFree for various tTHresh")
plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1 - SensitivityProgFree",ylab="SpecificityNonResp",main="SpecificityNonResp vs 1-SensitivityProgFree \nfor various tTHresh")
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', 15, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(1 - temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SpecificityNonResp", main = "SpecificityNonResp for various tTHresh")
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', 15, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SpecificityNonResp", main = "SpecificityNonResp for various tTHresh")
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', 15, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SensitivityProgFree", main = "SensitivityProgFree for various tTHresh")
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "npvNonResp"), '[[', 15, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "NPVNonResp", main = "NPVNonResp for various tTHresh")
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "ppvProgFree"), '[[', 15, 27), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "PPVProgFree", main = "PPVProgFree for various tTHresh")
c1 = 15 c2 = 27 temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {       temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]]    } temp <- na.omit(temp) plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1 - SensitivityProgFree",ylab="SpecificityNonResp",main="SpecificityNonResp vs 1-SensitivityProgFree \nfor various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SpecificityNonResp", main = "SpecificityNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SensitivityProgFree", main = "SensitivityProgFree for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "npvNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "NPVNonResp", main = "NPVNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "ppvProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "PPVProgFree", main = "PPVProgFree for various tTHresh")
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SpecificityNonResp", main = "SpecificityNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SensitivityProgFree", main = "SensitivityProgFree for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "npvNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "NPVNonResp", main = "NPVNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "ppvProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "PPVProgFree", main = "PPVProgFree for various tTHresh")
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "ppvProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "PPVProgFree", main = "PPVProgFree for various tTHresh")
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "npvNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "NPVNonResp", main = "NPVNonResp for various tTHresh")
c1 = 15 c2 = 25 temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {       temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]]    } temp <- na.omit(temp) plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1 - SensitivityProgFree",ylab="SpecificityNonResp",main="SpecificityNonResp vs 1-SensitivityProgFree \nfor various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SpecificityNonResp", main = "SpecificityNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SensitivityProgFree", main = "SensitivityProgFree for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "npvNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "NPVNonResp", main = "NPVNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "ppvProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "PPVProgFree", main = "PPVProgFree for various tTHresh")
c2 = 25 temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {       temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]]    } temp <- na.omit(temp) plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1 - SensitivityProgFree",ylab="SpecificityNonResp",main="SpecificityNonResp vs 1-SensitivityProgFree \nfor various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SpecificityNonResp", main = "SpecificityNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SensitivityProgFree", main = "SensitivityProgFree for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "npvNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "NPVNonResp", main = "NPVNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "ppvProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "PPVProgFree", main = "PPVProgFree for various tTHresh")
lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)
c1 = 15 c2 = 24 temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {       temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]]    } temp <- na.omit(temp) plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1 - SensitivityProgFree",ylab="SpecificityNonResp",main="SpecificityNonResp vs 1-SensitivityProgFree \nfor various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SpecificityNonResp", main = "SpecificityNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "SensitivityProgFree", main = "SensitivityProgFree for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "npvNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "NPVNonResp", main = "NPVNonResp for various tTHresh") temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = tThreshArray[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "ppvProgFree"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "tThresh", ylab = "PPVProgFree", main = "PPVProgFree for various tTHresh")
c1 = 15 c2 = 24 temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {       temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]]    } temp <- na.omit(temp) plot(1 - temp[, 1], temp[, 2], pch = 20,xlab="1 - SensitivityProgFree",ylab="SpecificityNonResp",main="SpecificityNonResp vs 1-SensitivityProgFree \nfor various tTHresh",ylim=c(0,1))
c1 = 15 c2 = 24 temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {       temp[[i,1]]=lapply(lapply(lapply(variedtThreshData, `[[`, "sensProgFree"), '[[', c1, c2), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "specNonResp"), '[[', c1, c2), '[[', 1)[[i]]    } temp <- na.omit(temp) plot(1 - temp[, 1], temp[, 2], pch = 20, xlab = "1 - SensitivityProgFree", ylab = "SpecificityNonResp", main = "SpecificityNonResp vs 1-SensitivityProgFree \nfor various tTHresh", ylim = c(0, 1), xlim = c(0, 1))
min(dataFullColsAnonymized$SurvTimeDays,na.rm = TRUE)
max(dataFullColsAnonymized$SurvTimeDays,na.rm = TRUE)
nrow(dataFullColsAnonymized)
quantile(dataFullColsAnonymized$SurvTimeDays,c(0.05,0.1))
quantile(dataFullColsAnonymized$SurvTimeDays,c(0.025,0.1))
quantile(dataFullColsAnonymized$SurvTimeDays,c(0.025,0.95))
quantile(dataFullColsAnonymized$SurvTimeDays,c(0.025,0.9))
quantile(dataFullColsAnonymized$SurvTimeDays,c(0.05,0.9))
quantile(dataFullColsAnonymized$SurvTimeDays,c(0.05,0.95))
quantile(dataFullColsAnonymized$SurvTimeDays,c(0.05,0.95))[[1]]
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
temp = matrix(nrow = length(tThreshArray), ncol = 2) for (i in c(1:length(tThreshArray))) {     temp[[i, 1]] = lapply(lapply(lapply(variedtThreshData, `[[`, "ppvProgFree"), '[[', c1, c2), '[[', 1)[[i]]     temp[[i, 2]] = lapply(lapply(lapply(variedtThreshData, `[[`, "npvNonResp"), '[[', c1, c2), '[[', 1)[[i]] } temp <- na.omit(temp) plot(temp[, 1], temp[, 2], pch = 20, xlab = "PPVProgFree", ylab = "NPVNonResp", main = "PPVProgFree vs NPVNonResp \nfor various tTHresh", ylim = c(0, 1), xlim = c(0, 1))
corr.bestClass$ppv+corr.bestClass$npv
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
floor(1.1)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
(corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0)
corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
(corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0)
sum(1,2)
corr.bestClass$npv
sum(corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0, corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0)
sum((corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0), corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0)
sum((corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0),( corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0))
sum(corr.bestClass$npv,corr.bestClass$ppv)
corr.bestClass$npv+corr.bestClass$ppv
corr.bestClass$npv+corr.bestClass$ppv,na.rm  =TRUE
corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0
corr.bestClass$npv
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
warnings()
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
npv0 = corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0
npv0
corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0
corr.bestClass$npv[is.na(corr.bestClass$npv)] <- 0
npv0 = corr.bestClass$npv
npv0
rm(npv0,ppv0.spec0,sens0,npvNonResp0,ppvProgFree0,specNonResp0,sensProgFree0)
rm(npv0,ppv0,spec0,sens0,npvNonResp0,ppvProgFree0,specNonResp0,sensProgFree0)
rm(npv0, ppv0, spec0, sens0, npvNonResp0, ppvProgFree0, specNonResp0, sensProgFree0)
source("~/_UC intern/AustraliaLinearResponse/AustraliaLinearResponse/_analyzeData_Patient.R")
